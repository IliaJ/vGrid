import { ViewSlot } from 'aurelia-framework';
import { ColumnMarkupHelper } from './columnMarkupHelper';
import { ViewCompiler, Container, ViewResources } from 'aurelia-framework';
import { HtmlCache } from './htmlCache';
import { ColumnBindingContext } from './columnBindingContext';
import { ViewSlots } from './viewSlots';
export declare class ColumnMarkup {
    element: Element;
    htmlCache: HtmlCache;
    viewSlots: ViewSlots;
    columnBindingContext: ColumnBindingContext;
    markupHelper: ColumnMarkupHelper;
    viewCompiler: ViewCompiler;
    container: Container;
    viewResources: ViewResources;
    overrideContext: any;
    colConfig: Array<any>;
    configLength: number;
    colRepeater: boolean;
    colRepeatRowTemplate: any;
    colRepeatHeaderTemplate: any;
    leftScroll: Element;
    mainScroll: Element;
    rightScroll: Element;
    groupScroll: Element;
    leftHeader: Element;
    mainHeader: Element;
    rightHeader: Element;
    leftRows: NodeListOf<Element>;
    mainRows: NodeListOf<Element>;
    rightRows: NodeListOf<Element>;
    groupRows: NodeListOf<Element>;
    rowLength: number;
    constructor(element: Element, viewCompiler: ViewCompiler, container: Container, viewResources: ViewResources, htmlCache: HtmlCache, viewSlots: ViewSlots, columnBindingContext: ColumnBindingContext);
    init(colConfig: any, overrideContext: any, colRepeater: any, colRepeatRowTemplate: any, colRepeatRowHeaderTemplate: any): void;
    updateInternalHtmlCache(): void;
    getRowViews(type: any): any;
    createColSetupContext(type: any): void;
    getHeaderViews(type: any): any;
    generateColumns(): void;
    createViewSlot(element: any, viewFactory: any): ViewSlot;
    getCol(): any[];
}
