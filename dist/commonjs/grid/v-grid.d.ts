import { ViewCompiler, Container, ViewResources, TaskQueue } from 'aurelia-framework';
import { MainMarkup } from './mainMarkup';
import { MainScrollEvents } from './mainScrollEvents';
import { RowMarkup } from './rowMarkup';
import { RowScrollEvents } from './rowScrollEvents';
import { ColumnMarkup } from './columnMarkup';
import { HtmlCache } from './htmlCache';
import { HtmlHeightWidth } from './htmlHeightWidth';
import { ViewSlots } from './viewSlots';
import { ColumnBindingContext } from './columnBindingContext';
import { RowDataBinder } from './rowDataBinder';
import { RowClickHandler } from './rowClickHandler';
import { GroupingElements } from './groupingElements';
import { Controller } from './controller';
import { LoadingScreen } from './loadingScreen';
import { ContextMenu } from './contextMenu';
export declare class VGrid {
    element: any;
    viewCompiler: ViewCompiler;
    container: Container;
    viewResources: ViewResources;
    taskQueue: TaskQueue;
    dragDropAttributeSharedContext: any;
    resizeAttributeSharedContext: any;
    colConfig: Array<any>;
    colRepeater: boolean;
    colRepeatRowTemplate: string;
    colRepeatRowHeaderTemplate: string;
    newGrid: boolean;
    controller: Controller;
    htmlCache: HtmlCache;
    htmlHeightWidth: HtmlHeightWidth;
    viewSlots: ViewSlots;
    columnBindingContext: ColumnBindingContext;
    rowDataBinder: RowDataBinder;
    mainMarkup: MainMarkup;
    mainScrollEvents: MainScrollEvents;
    rowMarkup: RowMarkup;
    rowScrollEvents: RowScrollEvents;
    rowClickHandler: RowClickHandler;
    columnMarkup: ColumnMarkup;
    groupingElements: GroupingElements;
    loadingScreen: LoadingScreen;
    contextMenu: ContextMenu;
    bindingContext: any;
    overrideContext: any;
    static inject: ({
        new (): Element;
        prototype: Element;
    } | typeof Container | typeof TaskQueue | typeof ViewResources | typeof ViewCompiler)[];
    attRowHeight: any;
    attHeaderHeight: any;
    attFooterHeight: any;
    attPanelHeight: any;
    attGridConnector: any;
    attMultiSelect: any;
    attManualSelection: any;
    attTheme: any;
    constructor(element: any, viewCompiler: any, container: any, viewResources: any, taskQueue: any);
    bind(bindingContext: any, overrideContext: any): void;
    unbind(): void;
    attached(): void;
}
