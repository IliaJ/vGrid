import { ViewCompiler, Container, ViewResources, TaskQueue } from 'aurelia-framework';
import { MainMarkup } from './mainMarkup';
import { MainScrollEvents } from './mainScrollEvents';
import { RowMarkup } from './rowMarkup';
import { RowScrollEvents } from './rowScrollEvents';
import { ColumnMarkup } from './columnMarkup';
import { HtmlCache } from './htmlCache';
import { HtmlHeightWidth } from './htmlHeightWidth';
import { ViewSlots } from './viewSlots';
import { ColumnBindingContext } from './columnBindingContext';
import { RowDataBinder } from './rowDataBinder';
import { RowClickHandler } from './rowClickHandler';
import { GroupingElements } from './groupingElements';
import { LoadingScreen } from './loadingScreen';
import { ContextMenu } from './contextMenu';
import { VGrid } from './v-grid';
export declare class Controller {
    vGrid: VGrid;
    htmlCache: HtmlCache;
    htmlHeightWidth: HtmlHeightWidth;
    viewSlots: ViewSlots;
    columnBindingContext: ColumnBindingContext;
    rowDataBinder: RowDataBinder;
    mainMarkup: MainMarkup;
    mainScrollEvents: MainScrollEvents;
    rowMarkup: RowMarkup;
    rowScrollEvents: RowScrollEvents;
    rowClickHandler: RowClickHandler;
    columnMarkup: ColumnMarkup;
    groupingElements: GroupingElements;
    loadingScreen: LoadingScreen;
    contextMenu: ContextMenu;
    htmlcolumnMarkupCache: ColumnMarkup;
    element: any;
    viewCompiler: ViewCompiler;
    container: Container;
    viewResources: ViewResources;
    taskQueue: TaskQueue;
    dragDropAttributeSharedContext: any;
    resizeAttributeSharedContext: any;
    colConfig: Array<any>;
    colRepeater: boolean;
    colRepeatRowTemplate: string;
    colRepeatRowHeaderTemplate: string;
    bindingContext: any;
    overrideContext: any;
    attRowHeight: any;
    attHeaderHeight: any;
    attFooterHeight: any;
    attPanelHeight: any;
    attMultiSelect: any;
    attManualSelection: any;
    attGridConnector: any;
    constructor(vGrid: any);
    getContext(): void;
    createGrid(): void;
    getElement(row: any, isDown: any, callback: any): void;
    getOperatorName(name: any): any;
    expandGroup(id: any): void;
    collapseGroup(id: any): void;
    select(row: any): void;
    addToGrouping(attribute: any): void;
    removeFromGrouping(attribute: any): void;
    getSelectionContext(): any;
    raiseEvent(name: any, data?: {}): CustomEvent;
    setLoadingScreen(value: any, msg: any, collectionLength: any): Promise<{}>;
    updateHeights(): void;
    updateHeaderGrouping(groups: any): void;
    collectionLength(): any;
    triggerScroll(position: any): void;
    rebindAllRows(): void;
    addEventListeners(): void;
}
