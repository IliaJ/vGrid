import { ViewCompiler, ViewResources, Container, TaskQueue, MainMarkup, MainScrollEvents, ColumnMarkup, HtmlHeightWidth, ViewSlots, ColumnBindingContext, HtmlCache, RowDataBinder, RowClickHandler, GroupingElements, RowMarkup, LoadingScreen, ContextMenu, VGrid, GridConnectorInterface, RowScrollEvents, ColConfig, BindingContext, OverrideContext, DragDropShardContext, ResizeShardContext, SelectionInterface } from '../interfaces';
export declare class Controller {
    vGrid: VGrid;
    htmlCache: HtmlCache;
    htmlHeightWidth: HtmlHeightWidth;
    viewSlots: ViewSlots;
    columnBindingContext: ColumnBindingContext;
    rowDataBinder: RowDataBinder;
    mainMarkup: MainMarkup;
    mainScrollEvents: MainScrollEvents;
    rowMarkup: RowMarkup;
    rowScrollEvents: RowScrollEvents;
    rowClickHandler: RowClickHandler;
    columnMarkup: ColumnMarkup;
    groupingElements: GroupingElements;
    loadingScreen: LoadingScreen;
    contextMenu: ContextMenu;
    htmlcolumnMarkupCache: ColumnMarkup;
    element: Element;
    viewCompiler: ViewCompiler;
    container: Container;
    viewResources: ViewResources;
    taskQueue: TaskQueue;
    dragDropAttributeSharedContext: DragDropShardContext;
    resizeAttributeSharedContext: ResizeShardContext;
    colConfig: Array<ColConfig>;
    backupColConfig: Array<ColConfig>;
    colRepeater: boolean;
    colRepeatRowTemplate: string;
    colRepeatRowHeaderTemplate: string;
    colGroupRow: string;
    colGroupElement: string;
    customMenuTemplates: any;
    bindingContext: BindingContext;
    overrideContext: OverrideContext;
    attRowHeight: number;
    attHeaderHeight: number;
    attFooterHeight: number;
    attPanelHeight: number;
    attMultiSelect: boolean;
    attManualSelection: boolean;
    attGridConnector: GridConnectorInterface;
    attOnRowDraw: Function;
    attI18N: any;
    attDataDelay: number;
    loadingScreenTemplate: string;
    footerTemplate: string;
    constructor(vGrid: VGrid);
    getContext(): void;
    triggerI18N(): void;
    createGrid(): void;
    getElement(rowNumber: number, isDownScroll: boolean, callbackFN: Function): void;
    expandGroup(id: string): void;
    collapseGroup(id: string): void;
    select(row: number): void;
    addToGrouping(attribute: string): void;
    removeFromGrouping(attribute: string): void;
    getSelectionContext(): SelectionInterface;
    raiseEvent(name: string, data?: {}): void;
    setLoadingScreen(value: boolean, msg?: string, collectionLength?: number): Promise<void>;
    updateHeights(): void;
    updateHeaderGrouping(groups: Array<string>): void;
    collectionLength(): number;
    triggerScroll(position: number): void;
    rebindAllRows(): void;
    getColumnConfig(): Array<ColConfig>;
    setColumnConfig(colConfig: Array<ColConfig>): void;
}
