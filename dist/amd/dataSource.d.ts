import { Selection } from './selection';
import { Entity, DatasourceConfig, SortObject, FilterObject, GroupingObj } from './interfaces';
export declare class DataSource {
    entity: Entity;
    groupHeight: number;
    rowHeight: number;
    private selection;
    private key;
    private arrayUtils;
    private mainArray;
    private config;
    private eventIdCount;
    private eventCallBacks;
    private collection;
    private selectionEventID;
    constructor(selection: Selection, config?: DatasourceConfig);
    getSelection(): Selection;
    getKey(): string;
    length(): number;
    triggerEvent(event: string): void;
    addEventListener(callback: Function): number;
    removeEventListener(id: number): void;
    setArray(array: Entity[]): void;
    push(array: Entity[]): void;
    refresh(data?: any): void;
    select(row: number): void;
    query(options: FilterObject[]): void;
    orderBy(attribute: string | SortObject, addToCurrentSort?: boolean): void;
    getCurrentOrderBy(): SortObject[];
    getCurrentFilter(): FilterObject[];
    getElement(row: number): Entity;
    group(grouping: GroupingObj[], keepExpanded?: boolean): void;
    groupCollapse(id: string): void;
    groupExpand(id: string): void;
    getGrouping(): GroupingObj[];
    addBlankRow(): void;
    unshift(data: any): void;
    remove(rows?: any[]): any[];
    getCollectionStatus(): any;
    setLocaleCompare(code: string, options?: any): void;
    getRowHeightState(): any;
    private getRowKey(row);
    private getRowKeys();
    private selectionEventCallback(e);
}
