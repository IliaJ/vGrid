module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ArrayFilter {\r\n    constructor() {\r\n        this.filterOperators = {\r\n            '=': 1,\r\n            '<=': 2,\r\n            '>=': 3,\r\n            '<': 4,\r\n            '>': 5,\r\n            '*': 6,\r\n            '!=': 7,\r\n            '!*': 8,\r\n            '*=': 9,\r\n            '=*': 10\r\n        };\r\n        this.lastFilter = [];\r\n    }\r\n    getOperatorNo(val) {\r\n        return this.filterOperators[val];\r\n    }\r\n    getLastFilter() {\r\n        return this.lastFilter;\r\n    }\r\n    runQueryOn(objArray, ObjFilter) {\r\n        this.lastFilter = ObjFilter;\r\n        let resultArray = objArray.filter((data) => {\r\n            let result = true;\r\n            ObjFilter.forEach((x) => {\r\n                let rowValue;\r\n                let filterValue;\r\n                let filterOperator = this.getOperatorNo(x.operator);\r\n                let newFilterOperator;\r\n                let typeBool = {\r\n                    true: true,\r\n                    false: false\r\n                };\r\n                let type;\r\n                try {\r\n                    if (data[x.attribute] === null || data[x.attribute] === undefined) {\r\n                        type = 'string';\r\n                    }\r\n                    else {\r\n                        type = typeof (data[x.attribute]);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    type = 'string';\r\n                }\r\n                switch (type) {\r\n                    case 'number':\r\n                        rowValue = data[x.attribute];\r\n                        filterValue = Number(x.value);\r\n                        filterOperator = filterOperator || 1;\r\n                        if (filterOperator === 6) {\r\n                            filterOperator = 1;\r\n                        }\r\n                        break;\r\n                    case 'string':\r\n                        if (data[x.attribute] === null || data[x.attribute] === undefined) {\r\n                            rowValue = '';\r\n                        }\r\n                        else {\r\n                            rowValue = data[x.attribute].toLowerCase();\r\n                        }\r\n                        filterValue = x.value.toLowerCase();\r\n                        filterOperator = filterOperator || 9;\r\n                        newFilterOperator = filterOperator;\r\n                        if (x.value.charAt(0) === '*' && filterOperator === 9) {\r\n                            newFilterOperator = 6;\r\n                            filterValue = filterValue.substr(1, filterValue.length);\r\n                        }\r\n                        if (x.value.charAt(0) === '*' && filterOperator === 1) {\r\n                            newFilterOperator = 10;\r\n                            filterValue = filterValue.substr(1, filterValue.length);\r\n                        }\r\n                        if (x.value.charAt(x.value.length - 1) === '*' && filterOperator === 1 && newFilterOperator === 10) {\r\n                            newFilterOperator = 6;\r\n                            filterValue = filterValue.substr(0, filterValue.length - 1);\r\n                        }\r\n                        if (x.value.charAt(x.value.length - 1) === '*'\r\n                            && filterOperator === 1\r\n                            && newFilterOperator !== 10\r\n                            && newFilterOperator !== 6) {\r\n                            newFilterOperator = 9;\r\n                            filterValue = filterValue.substr(0, filterValue.length - 1);\r\n                        }\r\n                        if (filterOperator !== newFilterOperator) {\r\n                            filterOperator = newFilterOperator;\r\n                        }\r\n                        break;\r\n                    case 'boolean':\r\n                        rowValue = data[x.attribute];\r\n                        filterValue = typeBool[x.value];\r\n                        filterOperator = 1;\r\n                        break;\r\n                    case 'object':\r\n                        try {\r\n                            rowValue = new Date(data[x.attribute].getFullYear(), data[x.attribute].getMonth(), data[x.attribute].getDate()).getTime();\r\n                            filterValue = new Date(x.value.getFullYear(), x.value.getMonth(), x.value.getDate()).getTime();\r\n                        }\r\n                        catch (e) {\r\n                            rowValue = 0;\r\n                            filterValue = 1;\r\n                        }\r\n                        filterOperator = filterOperator || 2;\r\n                        break;\r\n                    default:\r\n                        try {\r\n                            rowValue = data[x.attribute].toLowerCase();\r\n                        }\r\n                        catch (err) {\r\n                            rowValue = data[x.attribute];\r\n                        }\r\n                        try {\r\n                            filterValue = x.value.toLowerCase();\r\n                        }\r\n                        catch (err) {\r\n                            filterValue = x.value;\r\n                        }\r\n                        filterOperator = filterOperator || 1;\r\n                        break;\r\n                }\r\n                switch (filterOperator) {\r\n                    case 1:\r\n                        if (rowValue !== filterValue) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        if (!(rowValue <= filterValue)) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        if (!(rowValue >= filterValue)) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 4:\r\n                        if (!(rowValue < filterValue)) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 5:\r\n                        if (!(rowValue > filterValue)) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 6:\r\n                        if (rowValue.indexOf(filterValue) === -1) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 7:\r\n                        if (rowValue === filterValue) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 8:\r\n                        if (rowValue.indexOf(filterValue) !== -1) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 9:\r\n                        if (rowValue.substring(0, filterValue.length) !== filterValue) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 10:\r\n                        if (rowValue.substring(rowValue.length - filterValue.length, rowValue.length) !== filterValue) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        if (rowValue !== filterValue) {\r\n                            result = false;\r\n                        }\r\n                }\r\n                if (type === 'string') {\r\n                    if (x.value.charAt(0) === '*' && x.value.length === 1) {\r\n                        result = true;\r\n                    }\r\n                }\r\n            });\r\n            return result;\r\n        });\r\n        return resultArray;\r\n    }\r\n}\r\nexports.ArrayFilter = ArrayFilter;\r\n//# sourceMappingURL=arrayFilter.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860168,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
