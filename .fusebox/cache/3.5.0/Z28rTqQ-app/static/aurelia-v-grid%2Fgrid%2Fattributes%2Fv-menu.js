module.exports = { contents: "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _a, _b;\r\nconst aurelia_framework_1 = require(\"aurelia-framework\");\r\nconst v_grid_1 = require(\"../v-grid\");\r\nlet VGridAttributeMenu = class VGridAttributeMenu {\r\n    constructor(element, vGrid) {\r\n        this.element = element;\r\n        this.controller = vGrid.controller;\r\n        this.raiseEvent = vGrid.controller.raiseEvent;\r\n        this.groupingElements = vGrid.groupingElements;\r\n        this.openBinded = this.open.bind(this);\r\n        this.checkBinded = this.check.bind(this);\r\n        this.callbackBinded = this.callback.bind(this);\r\n    }\r\n    attached() {\r\n        this.element.addEventListener('contextmenu', this.openBinded);\r\n    }\r\n    bind(context) {\r\n        this.context = context;\r\n    }\r\n    unbind() {\r\n        document.removeEventListener('click', this.checkBinded);\r\n    }\r\n    check(e) {\r\n        let x = e.target.classList.contains('avg-menu__link');\r\n        if (!x) {\r\n            this.controller.contextMenu.setDefaults();\r\n            document.removeEventListener('mousedown', this.checkBinded);\r\n        }\r\n    }\r\n    callback(type, option, event) {\r\n        if (type === 'copypaste') {\r\n            if (option === 'copy') {\r\n                this.controller.vGrid.copyPasteValueSharedContext = this.context.rowRef[this.copypaste];\r\n                return true;\r\n            }\r\n            if (option === 'paste') {\r\n                let sel = this.context.selection;\r\n                let rows = sel.getSelectedRows();\r\n                if (rows.length <= 1) {\r\n                    this.context.rowRef[this.copypaste] = this.controller.vGrid.copyPasteValueSharedContext;\r\n                }\r\n                else {\r\n                    rows = sel.getSelectedRows();\r\n                    this.controller.updateRowData(this.copypaste, this.controller.vGrid.copyPasteValueSharedContext, rows);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        if (type === 'filter') {\r\n            if (option === 'clear') {\r\n                this.raiseEvent('filterClearCell', { attribute: this.filter.replace('rowRef.', ''), key: this.filterkey });\r\n                document.removeEventListener('click', this.checkBinded);\r\n                return true;\r\n            }\r\n            if (option === 'clearall') {\r\n                this.raiseEvent('filterClearAll', {});\r\n                document.removeEventListener('click', this.checkBinded);\r\n                return true;\r\n            }\r\n            if (option === 'showall') {\r\n                this.controller.attGridConnector.query(null);\r\n                document.removeEventListener('click', this.checkBinded);\r\n                return true;\r\n            }\r\n        }\r\n        if (type === 'sort') {\r\n            let field = this.sort;\r\n            let arr = this.sort.split(';');\r\n            arr.forEach((x) => {\r\n                if (x.indexOf('field') !== -1) {\r\n                    field = x.replace('field:', '');\r\n                }\r\n            });\r\n            this.controller.attGridConnector.orderBy({\r\n                attribute: field,\r\n                asc: option === 'desc' ? false : true\r\n            }, event.shiftKey);\r\n            document.removeEventListener('click', this.checkBinded);\r\n            return true;\r\n        }\r\n        if (type === 'hide') {\r\n            let x = this.getColumnContext();\r\n            let width = x.curColumnsArray[x.curColNo].width;\r\n            let count = -1;\r\n            let columnsArraySorted = [];\r\n            x.curColumnsArray.forEach((xy) => {\r\n                if (xy.show) {\r\n                    count++;\r\n                }\r\n                columnsArraySorted.push(xy);\r\n            });\r\n            if (count || x.curColType !== 'main') {\r\n                x.curColumnsArray[x.curColNo].show = false;\r\n                columnsArraySorted.sort((a, b) => {\r\n                    return a.left - b.left;\r\n                });\r\n                let appendValue = 0;\r\n                columnsArraySorted.forEach((xy) => {\r\n                    if (xy.show) {\r\n                        xy.left = appendValue;\r\n                        appendValue = appendValue + xy.width;\r\n                    }\r\n                });\r\n                if (x.curColType === 'main') {\r\n                    this.controller.htmlHeightWidth.removeWidthFromMain(width);\r\n                }\r\n                if (x.curColType === 'right') {\r\n                    this.controller.htmlHeightWidth.removeWidthFromRight(width);\r\n                }\r\n                if (x.curColType === 'left') {\r\n                    this.controller.htmlHeightWidth.removeWidthFromLeft(width);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        if (type === 'groupby') {\r\n            let groupTitle = this.groupbytitle ? this.groupbytitle : this.groupby;\r\n            this.groupingElements.addGroup(groupTitle, this.groupby);\r\n            this.groupingElements.addToGrouping();\r\n            return true;\r\n        }\r\n        if (type === 'filterOption') {\r\n            let field = this.filter;\r\n            let arr = this.filter.split(';');\r\n            arr.forEach((x) => {\r\n                if (x.indexOf('field') !== -1) {\r\n                    field = x.replace('field:', '');\r\n                }\r\n            });\r\n            this.raiseEvent('filterUpdate', {\r\n                attribute: field,\r\n                operator: option,\r\n                key: this.filterkey\r\n            });\r\n            document.removeEventListener('click', this.checkBinded);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    open(e) {\r\n        this.check(e);\r\n        document.addEventListener('mousedown', this.checkBinded);\r\n        e.preventDefault();\r\n        if (!this.controller.contextMenu.show) {\r\n            let clickCoords = this.getPosition(e);\r\n            this.controller.contextMenu.openMenu({\r\n                top: clickCoords.y,\r\n                left: clickCoords.x,\r\n                filter: this.filter,\r\n                sort: this.sort,\r\n                hideshow: this.canHide() ? this.hideshow : null,\r\n                pinned: this.pinned,\r\n                copypaste: this.copypaste,\r\n                groupby: this.groupby,\r\n                callback: this.callbackBinded\r\n            });\r\n        }\r\n    }\r\n    canHide() {\r\n        let x = this.getColumnContext();\r\n        let returnValue = false;\r\n        let count = -1;\r\n        let columnsArraySorted = [];\r\n        x.curColumnsArray.forEach((xy) => {\r\n            if (xy.show) {\r\n                count++;\r\n            }\r\n            columnsArraySorted.push(xy);\r\n        });\r\n        if (count || x.curColType !== 'main') {\r\n            returnValue = true;\r\n        }\r\n        return returnValue;\r\n    }\r\n    getPosition(e) {\r\n        let posx = 0;\r\n        let posy = 0;\r\n        if (e.pageX || e.pageY) {\r\n            posx = e.pageX;\r\n            posy = e.pageY;\r\n        }\r\n        else if (e.clientX || e.clientY) {\r\n            posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        return {\r\n            x: posx,\r\n            y: posy\r\n        };\r\n    }\r\n    getColumnContext() {\r\n        let curTarget = this.element;\r\n        let count = 0;\r\n        let exit = true;\r\n        let isOk = false;\r\n        let curColType;\r\n        let curColNo;\r\n        let curContext;\r\n        let curColumnsArray;\r\n        while (exit) {\r\n            count++;\r\n            if (!curTarget) {\r\n                exit = false;\r\n            }\r\n            else {\r\n                switch (true) {\r\n                    case curTarget.nodeName === 'AVG-COL':\r\n                        isOk = true;\r\n                        exit = false;\r\n                        break;\r\n                    default:\r\n                        curTarget = curTarget.parentNode;\r\n                        break;\r\n                }\r\n            }\r\n            if (count > 10) {\r\n                exit = false;\r\n            }\r\n        }\r\n        if (isOk) {\r\n            curColType = curTarget.attributes.getNamedItem('data-avg-type').value;\r\n            curColNo = parseInt(curTarget.attributes.getNamedItem('data-avg-config-col').value, 10);\r\n            curContext = this.controller.columnBindingContext['setup' + curColType][curColNo];\r\n            curColumnsArray = this.controller.columnBindingContext['setup' + curColType];\r\n        }\r\n        return { curColType: curColType, curColNo: curColNo, curContext: curContext, curColumnsArray: curColumnsArray };\r\n    }\r\n};\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributeMenu.prototype, \"filter\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributeMenu.prototype, \"filterkey\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributeMenu.prototype, \"sort\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributeMenu.prototype, \"pinned\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributeMenu.prototype, \"groupby\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributeMenu.prototype, \"hideshow\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributeMenu.prototype, \"groupbytitle\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributeMenu.prototype, \"copypaste\", void 0);\r\nVGridAttributeMenu = __decorate([\r\n    aurelia_framework_1.customAttribute('v-menu'),\r\n    aurelia_framework_1.inject(Element, v_grid_1.VGrid),\r\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof Element !== \"undefined\" && Element) === \"function\" ? _a : Object, typeof (_b = typeof v_grid_1.VGrid !== \"undefined\" && v_grid_1.VGrid) === \"function\" ? _b : Object])\r\n], VGridAttributeMenu);\r\nexports.VGridAttributeMenu = VGridAttributeMenu;\r\n//# sourceMappingURL=v-menu.js.map",
dependencies: ["aurelia-framework","../v-grid"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860150,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
