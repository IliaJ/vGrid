module.exports = { contents: "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _a, _b;\r\nconst aurelia_framework_1 = require(\"aurelia-framework\");\r\nconst v_grid_1 = require(\"../v-grid\");\r\nlet VGridAttributesFilter = class VGridAttributesFilter {\r\n    constructor(element, vGrid) {\r\n        this.vGrid = vGrid;\r\n        this.element = element;\r\n    }\r\n    getOperatorName(operator) {\r\n        return this.vGrid.filterOperatorNames[operator];\r\n    }\r\n    attached() {\r\n        if (this.attribute) {\r\n            this.vGrid.element.addEventListener('filterUpdate', (e) => {\r\n                if (e.detail.attribute === this.attribute && e.detail.key === this.key) {\r\n                    this.filterOperator = e.detail.operator;\r\n                    this.element.placeholder =\r\n                        this.getOperatorName(this.filterOperator);\r\n                    this.updateFilter(this.vGrid.attGridConnector.getCurrentFilter());\r\n                }\r\n            });\r\n            this.vGrid.element.addEventListener('filterUpdateValues', () => {\r\n                let curFilter = this.vGrid.attGridConnector.getCurrentFilter();\r\n                curFilter.forEach((f) => {\r\n                    if (f.attribute === this.attribute && f.key === this.key) {\r\n                        this.element.value = f.value;\r\n                        this.filterOperator = f.operator;\r\n                        this.element.placeholder =\r\n                            this.getOperatorName(this.filterOperator);\r\n                    }\r\n                });\r\n            });\r\n            this.vGrid.element.addEventListener('filterTranslation', () => {\r\n                this.element.placeholder =\r\n                    this.getOperatorName(this.filterOperator);\r\n                this.updateFilter(this.vGrid.attGridConnector.getCurrentFilter());\r\n            });\r\n            this.vGrid.element.addEventListener('filterClearCell', (e) => {\r\n                if (e.detail.attribute === this.attribute && e.detail.key === this.key) {\r\n                    this.resetValue();\r\n                    this.updateFilter(this.vGrid.attGridConnector.getCurrentFilter());\r\n                }\r\n            });\r\n            this.vGrid.element.addEventListener('filterClearAll', () => {\r\n                this.resetValue();\r\n                this.updateFilter(this.vGrid.attGridConnector.getCurrentFilter());\r\n            });\r\n            if (this.type !== 'checkbox') {\r\n                this.element.placeholder =\r\n                    this.getOperatorName(this.filterOperator);\r\n                this.element.onkeyup = (e) => {\r\n                    if (e.keyCode === 13) {\r\n                        this.updateFilter(this.vGrid.attGridConnector.getCurrentFilter());\r\n                        this.vGrid.attGridConnector.query(this.vGrid.attGridConnector.getCurrentFilter());\r\n                    }\r\n                    else {\r\n                        if (this.filterOn === 'onKeyDown') {\r\n                            this.updateFilter(this.vGrid.attGridConnector.getCurrentFilter());\r\n                            this.vGrid.attGridConnector.query(this.vGrid.attGridConnector.getCurrentFilter());\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                this.element.indeterminate = true;\r\n                this.element.style.opacity = '0.3';\r\n                this.element.onclick = () => {\r\n                    switch (this.state) {\r\n                        case 0:\r\n                            this.state = 2;\r\n                            this.element.style.opacity = '1';\r\n                            this.element.checked = true;\r\n                            this.element.indeterminate = false;\r\n                            break;\r\n                        case 2:\r\n                            this.state = 3;\r\n                            this.element.style.opacity = '1';\r\n                            this.element.indeterminate = false;\r\n                            break;\r\n                        default:\r\n                            this.element.checked = false;\r\n                            this.state = 0;\r\n                            this.element.style.opacity = '0.3';\r\n                            this.element.indeterminate = true;\r\n                    }\r\n                    this.updateFilter(this.vGrid.attGridConnector.getCurrentFilter());\r\n                    this.vGrid.attGridConnector.query(this.vGrid.attGridConnector.getCurrentFilter());\r\n                };\r\n            }\r\n        }\r\n    }\r\n    bind(bindingContext, overrideContext) {\r\n        this.bindingContext = bindingContext;\r\n        this.overrideContext = overrideContext;\r\n        let valueConverter = this.valueConverters(this.converter);\r\n        this.filterOn = this.keydown === 'true' ? 'onKeyDown' : 'onEnterKey';\r\n        this.filterOperator = this.operator || '=';\r\n        this.attribute = this.field;\r\n        this.valueFormater = valueConverter || null;\r\n        this.type = this.element.type;\r\n        this.state = 0;\r\n    }\r\n    getValue() {\r\n        if (this.type !== 'checkbox') {\r\n            return this.valueFormater ? this.valueFormater.fromView(this.element.value) : this.element.value;\r\n        }\r\n        else {\r\n            if (this.valueFormater && this.state) {\r\n                return this.valueFormater.fromView(this.state ? this.state === 2 ? true : false : '');\r\n            }\r\n            else {\r\n                return this.state ? this.state === 2 ? true : false : '';\r\n            }\r\n        }\r\n    }\r\n    resetValue() {\r\n        if (this.type !== 'checkbox') {\r\n            this.element.value = '';\r\n        }\r\n        else {\r\n            this.state = 0;\r\n            this.element.checked = false;\r\n        }\r\n    }\r\n    updateFilter(curFilter) {\r\n        let filterIndex = -1;\r\n        curFilter.forEach((filter, index) => {\r\n            if (filter.attribute === this.attribute && filter.key === this.key) {\r\n                filterIndex = index;\r\n            }\r\n        });\r\n        if (filterIndex !== -1) {\r\n            if (this.getValue() === '') {\r\n                curFilter.splice(filterIndex, 1);\r\n            }\r\n            else {\r\n                curFilter[filterIndex].value = this.getValue();\r\n                curFilter[filterIndex].operator = this.filterOperator;\r\n            }\r\n        }\r\n        else {\r\n            if (this.getValue() !== '') {\r\n                curFilter.push({\r\n                    key: this.key,\r\n                    attribute: this.attribute,\r\n                    operator: this.filterOperator,\r\n                    value: this.getValue()\r\n                });\r\n            }\r\n        }\r\n    }\r\n    valueConverters(value) {\r\n        let valueConverter = this.vGrid.viewResources.getValueConverter.bind(this.vGrid.viewResources);\r\n        return valueConverter(value);\r\n    }\r\n};\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributesFilter.prototype, \"field\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributesFilter.prototype, \"operator\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributesFilter.prototype, \"converter\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributesFilter.prototype, \"keydown\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributesFilter.prototype, \"key\", void 0);\r\nVGridAttributesFilter = __decorate([\r\n    aurelia_framework_1.customAttribute('v-filter'),\r\n    aurelia_framework_1.inject(Element, v_grid_1.VGrid),\r\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof HTMLElement !== \"undefined\" && HTMLElement) === \"function\" ? _a : Object, typeof (_b = typeof v_grid_1.VGrid !== \"undefined\" && v_grid_1.VGrid) === \"function\" ? _b : Object])\r\n], VGridAttributesFilter);\r\nexports.VGridAttributesFilter = VGridAttributesFilter;\r\n//# sourceMappingURL=v-filter.js.map",
dependencies: ["aurelia-framework","../v-grid"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860149,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
