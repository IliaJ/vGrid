module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Selection {\r\n    constructor(mode) {\r\n        this.mode = mode;\r\n        this.selectedRows = 0;\r\n        this.eventIdCount = -1;\r\n        this.eventCallBacks = [];\r\n        this.selection = new Set([]);\r\n    }\r\n    triggerEvent(event) {\r\n        this.eventCallBacks.forEach((FN, i) => {\r\n            if (FN !== null) {\r\n                let alive = FN(event);\r\n                if (!alive) {\r\n                    this.eventCallBacks[i] = null;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    addEventListener(callback) {\r\n        this.eventIdCount++;\r\n        this.eventCallBacks.push(callback);\r\n        return this.eventIdCount;\r\n    }\r\n    getLength() {\r\n        return this.selection.size;\r\n    }\r\n    getMode() {\r\n        return this.mode;\r\n    }\r\n    getRowKey(row) {\r\n        return row;\r\n    }\r\n    getRowKeys() {\r\n        return [];\r\n    }\r\n    overrideGetRowKey(fn) {\r\n        this.getRowKey = fn;\r\n    }\r\n    overrideGetRowKeys(fn) {\r\n        this.getRowKeys = fn;\r\n    }\r\n    isSelected(row) {\r\n        let result = false;\r\n        if (this.selectedRows > 0) {\r\n            result = this.selection.has(this.getRowKey(row));\r\n        }\r\n        return result;\r\n    }\r\n    deSelectAll() {\r\n        this.selection.clear();\r\n        this.selectedRows = this.selection.size;\r\n        this.triggerEvent('selection_changed');\r\n    }\r\n    deSelect(row) {\r\n        this.selection.delete(this.getRowKey(row));\r\n        this.selectedRows = this.selection.size;\r\n        this.triggerEvent('selection_changed');\r\n    }\r\n    select(row, add) {\r\n        switch (this.mode) {\r\n            case 'none':\r\n            case null:\r\n            case undefined:\r\n                break;\r\n            case 'single':\r\n                this.selection.clear();\r\n                this.selection.add(this.getRowKey(row));\r\n                this.selectedRows = this.selection.size;\r\n                break;\r\n            case 'multiple':\r\n                if (!add) {\r\n                    this.selection.clear();\r\n                    this.selection.add(this.getRowKey(row));\r\n                    this.selectedRows = this.selection.size;\r\n                }\r\n                else {\r\n                    this.selection.add(this.getRowKey(row));\r\n                    this.selectedRows = this.selection.size;\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n        this.triggerEvent('selection_changed');\r\n    }\r\n    selectRange(start, end) {\r\n        if (this.mode === 'multiple') {\r\n            this.selection.clear();\r\n            for (let i = start; i < end + 1; i++) {\r\n                this.selection.add(this.getRowKey(i));\r\n            }\r\n            this.selectedRows = this.selection.size;\r\n            this.triggerEvent('selection_changed');\r\n        }\r\n    }\r\n    getSelectedRows() {\r\n        let array = [];\r\n        let keys = this.getRowKeys();\r\n        if (this.selectedRows > 0) {\r\n            keys.forEach((key, index) => {\r\n                if (this.selection.has(key) === true) {\r\n                    array.push(index);\r\n                }\r\n            });\r\n        }\r\n        return array;\r\n    }\r\n    setSelectedRows(newRows) {\r\n        if (this.selectedRows > 0) {\r\n            this.selection.clear();\r\n        }\r\n        for (let i = 0; i < newRows.length; i++) {\r\n            this.selection.add(this.getRowKey(newRows[i]));\r\n        }\r\n        this.selectedRows = this.selection.size;\r\n        this.triggerEvent('selection_changed');\r\n    }\r\n    reset() {\r\n        if (this.selectedRows > 0) {\r\n            this.selection.clear();\r\n        }\r\n        this.selectedRows = this.selection.size;\r\n        this.triggerEvent('selection_changed');\r\n    }\r\n}\r\nexports.Selection = Selection;\r\n//# sourceMappingURL=selection.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860167,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
