module.exports = { contents: "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _a, _b;\r\nconst aurelia_framework_1 = require(\"aurelia-framework\");\r\nconst v_grid_1 = require(\"../v-grid\");\r\nlet VGridAttributesSelection = class VGridAttributesSelection {\r\n    constructor(element, vGrid) {\r\n        this.vGrid = vGrid;\r\n        this.controller = vGrid.controller;\r\n        this.element = element;\r\n    }\r\n    selectedChanged(newValue) {\r\n        if (this.type === 'row') {\r\n            this.element.checked = newValue;\r\n        }\r\n    }\r\n    bind(bindingContext, overrideContext) {\r\n        this.bindingContext = bindingContext;\r\n        this.overrideContext = overrideContext;\r\n    }\r\n    attached() {\r\n        this.element.checked = this.selected;\r\n        this.element.onclick = () => {\r\n            let status = this.element.checked === 'true' || this.element.checked === true ? true : false;\r\n            if (status) {\r\n                if (this.type === 'header') {\r\n                    this.bindingContext.selection.selectRange(0, this.controller.collectionLength() - 1);\r\n                    this.controller.rowClickHandler.updateSelectionOnAllRows();\r\n                }\r\n                if (this.type === 'row') {\r\n                    this.bindingContext.selection.select(this.bindingContext.row, true);\r\n                    this.controller.rowClickHandler.updateSelectionOnAllRows();\r\n                }\r\n            }\r\n            else {\r\n                if (this.type === 'header') {\r\n                    this.bindingContext.selection.deSelectAll();\r\n                    this.controller.rowClickHandler.updateSelectionOnAllRows();\r\n                }\r\n                if (this.type === 'row') {\r\n                    this.bindingContext.selection.deSelect(this.bindingContext.row);\r\n                    this.controller.rowClickHandler.updateSelectionOnAllRows();\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", Boolean)\r\n], VGridAttributesSelection.prototype, \"selected\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridAttributesSelection.prototype, \"type\", void 0);\r\nVGridAttributesSelection = __decorate([\r\n    aurelia_framework_1.customAttribute('v-selection'),\r\n    aurelia_framework_1.inject(Element, v_grid_1.VGrid),\r\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof HTMLInputElement !== \"undefined\" && HTMLInputElement) === \"function\" ? _a : Object, typeof (_b = typeof v_grid_1.VGrid !== \"undefined\" && v_grid_1.VGrid) === \"function\" ? _b : Object])\r\n], VGridAttributesSelection);\r\nexports.VGridAttributesSelection = VGridAttributesSelection;\r\n//# sourceMappingURL=v-selection.js.map",
dependencies: ["aurelia-framework","../v-grid"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860151,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
