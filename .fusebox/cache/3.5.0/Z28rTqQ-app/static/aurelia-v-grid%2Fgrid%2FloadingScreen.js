module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst aurelia_framework_1 = require(\"aurelia-framework\");\r\nclass LoadingScreen {\r\n    constructor(element, viewCompiler, container, viewResources, viewSlots) {\r\n        this.element = element;\r\n        this.viewSlots = viewSlots;\r\n        this.viewCompiler = viewCompiler;\r\n        this.container = container;\r\n        this.viewResources = viewResources;\r\n        this.loading = false;\r\n        this.loadingMessage = 'Loading';\r\n    }\r\n    updateLoadingDefaultLoadingMessage(msg) {\r\n        this.loadingMessage = msg;\r\n    }\r\n    init(overrideContext, loadingScreenTemplate) {\r\n        this.overrideContext = overrideContext;\r\n        let loadingScreentHtml = loadingScreenTemplate || `\r\n      <div class=\"avg-overlay\" if.bind=\"loading\">\r\n      </div>\r\n      <div if.two-way=\"loading\" class=\"avg-progress-indicator\">\r\n      <div class=\"avg-progress-bar\" role=\"progressbar\" style=\"width:100%\">\r\n      <span>$au{ loadingMessage }</span>\r\n      </div>\r\n      </div>`.replace(/\\$(au{)/g, '${');\r\n        let viewFactory = this.viewCompiler.compile(`<template>\r\n      ${loadingScreentHtml}\r\n      </template>`, this.viewResources);\r\n        let view = viewFactory.create(this.container);\r\n        let loadingScreenViewSlot = new aurelia_framework_1.ViewSlot(this.element, true);\r\n        loadingScreenViewSlot.add(view);\r\n        loadingScreenViewSlot.bind(this, {\r\n            bindingContext: this,\r\n            parentOverrideContext: this.overrideContext\r\n        });\r\n        loadingScreenViewSlot.attached();\r\n        this.viewSlots.loadingScreenViewSlot = loadingScreenViewSlot;\r\n    }\r\n    enable(msg, collectionLength) {\r\n        return new Promise((resolve) => {\r\n            this.loading = collectionLength ? collectionLength > 10000 ? true : false : false;\r\n            this.loadingMessage = msg || '...';\r\n            setTimeout(() => {\r\n                resolve(null);\r\n            });\r\n        });\r\n    }\r\n    disable() {\r\n        return new Promise((resolve) => {\r\n            this.loading = false;\r\n            setTimeout(() => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.LoadingScreen = LoadingScreen;\r\n//# sourceMappingURL=loadingScreen.js.map",
dependencies: ["aurelia-framework"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860155,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
