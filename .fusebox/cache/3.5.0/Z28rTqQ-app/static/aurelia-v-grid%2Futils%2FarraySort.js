module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ArraySort {\r\n    constructor() {\r\n        this.lastSort = [];\r\n        this.curSort = [];\r\n        this.localeCompareCode = null;\r\n        this.localeCompareOptions = { sensitivity: 'base' };\r\n    }\r\n    setLocaleCompare(code, options) {\r\n        this.localeCompareCode = code ? code : null;\r\n        this.localeCompareOptions = options ? options : { sensitivity: 'base' };\r\n    }\r\n    reset(defaultSortAttribute) {\r\n        if (defaultSortAttribute) {\r\n            this.lastSort = [{ attribute: defaultSortAttribute, asc: true, no: 0 }];\r\n            this.curSort = [{ attribute: defaultSortAttribute, asc: true, no: 0 }];\r\n        }\r\n        else {\r\n            this.lastSort = [];\r\n            this.curSort = [];\r\n        }\r\n    }\r\n    setLastSort(array) {\r\n        this.lastSort = array;\r\n        this.curSort = array;\r\n    }\r\n    setOrderBy(param, add) {\r\n        let sort;\r\n        let useSetValue = false;\r\n        if (param.asc === undefined) {\r\n            sort = {\r\n                attribute: param,\r\n                asc: true\r\n            };\r\n        }\r\n        else {\r\n            sort = {\r\n                attribute: param.attribute,\r\n                asc: param.asc\r\n            };\r\n            useSetValue = true;\r\n        }\r\n        if (add && this.lastSort.length > 0) {\r\n            this.curSort = this.lastSort;\r\n            let exist = false;\r\n            this.curSort.forEach((x) => {\r\n                if (!useSetValue) {\r\n                    if (x.attribute === sort.attribute) {\r\n                        exist = true;\r\n                        x.asc = x.asc === true ? false : true;\r\n                    }\r\n                }\r\n            });\r\n            if (!exist) {\r\n                this.curSort.push(sort);\r\n                this.curSort[this.curSort.length - 1].no = this.curSort.length;\r\n            }\r\n            this.lastSort = this.curSort;\r\n        }\r\n        else {\r\n            this.curSort = [sort];\r\n            this.curSort[0].no = 1;\r\n            if (this.lastSort[0]) {\r\n                if (this.lastSort[0].attribute === this.curSort[0].attribute) {\r\n                    if (this.lastSort[0].asc === this.curSort[0].asc) {\r\n                        if (!useSetValue) {\r\n                            this.curSort[0].asc = this.curSort[0].asc === true ? false : true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.lastSort = this.curSort;\r\n        }\r\n    }\r\n    getOrderBy() {\r\n        return this.curSort;\r\n    }\r\n    getValue(attribute, obj) {\r\n        let arr = attribute.split('.');\r\n        let tempValue = Infinity;\r\n        if (arr.length > 1) {\r\n            try {\r\n                tempValue = obj[arr[0]][arr[1]];\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (arr.length === 1) {\r\n            try {\r\n                tempValue = obj[attribute];\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return tempValue;\r\n    }\r\n    runOrderbyOn(array) {\r\n        let thisSort = this.getOrderBy();\r\n        array.sort((obj1, obj2) => {\r\n            let result = 0;\r\n            for (let i = 0; i < thisSort.length && result === 0; ++i) {\r\n                let currentObj = thisSort[i];\r\n                let v1 = this.getValue(currentObj.attribute, obj1);\r\n                let v2 = this.getValue(currentObj.attribute, obj2);\r\n                let getLocaleCompareResult = (x1, x2) => {\r\n                    let resultLocale = null;\r\n                    if (this.localeCompareCode) {\r\n                        resultLocale = x1.localeCompare(x2, this.localeCompareCode, this.localeCompareOptions);\r\n                    }\r\n                    else {\r\n                        resultLocale = x1.localeCompare(x2);\r\n                    }\r\n                    return resultLocale;\r\n                };\r\n                if (v1 !== v2) {\r\n                    if (currentObj.asc) {\r\n                        if (typeof v1 === 'string' && typeof v1 === 'string') {\r\n                            if (getLocaleCompareResult(v1, v2) < 0 &&\r\n                                getLocaleCompareResult(v1, v2) !== 0) {\r\n                                result = -1;\r\n                            }\r\n                            else {\r\n                                result = 1;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (v1 < v2) {\r\n                                result = -1;\r\n                            }\r\n                            else {\r\n                                result = 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (typeof v1 === 'string' && typeof v1 === 'string') {\r\n                            if (getLocaleCompareResult(v1, v2) < 0 &&\r\n                                getLocaleCompareResult(v1, v2) !== 0) {\r\n                                result = 1;\r\n                            }\r\n                            else {\r\n                                result = -1;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (v1 < v2) {\r\n                                result = 1;\r\n                            }\r\n                            else {\r\n                                result = -1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        });\r\n        this.lastSort = this.getOrderBy().slice(0);\r\n    }\r\n}\r\nexports.ArraySort = ArraySort;\r\n//# sourceMappingURL=arraySort.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860168,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
