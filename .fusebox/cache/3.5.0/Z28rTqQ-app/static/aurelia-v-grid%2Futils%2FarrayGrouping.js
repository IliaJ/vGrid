module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ArrayGrouping {\r\n    constructor() {\r\n        this.grouping = [];\r\n        this.expanded = new Set([]);\r\n    }\r\n    reset() {\r\n        this.groups = [];\r\n        this.grouping = [];\r\n        this.expanded = new Set([]);\r\n    }\r\n    group(arrayToGroup, grouping, keepExpanded) {\r\n        if (grouping.length > 0) {\r\n            if (!keepExpanded) {\r\n                this.expanded = new Set([]);\r\n            }\r\n            const groups = [];\r\n            grouping.forEach((groupBy, groupNo) => {\r\n                if (groupNo === 0) {\r\n                    const mainGroup = this.groupMain(arrayToGroup, groupBy.field, groupNo);\r\n                    groups.push(mainGroup);\r\n                }\r\n                else {\r\n                    const childGroupArray = groups[groups.length - 1];\r\n                    const newSubGroup = this.groupChildren(childGroupArray, groupBy.field, groupNo);\r\n                    groups.push(newSubGroup);\r\n                }\r\n            });\r\n            this.groups = groups;\r\n            this.grouping = grouping;\r\n            if (!keepExpanded) {\r\n                return groups[0];\r\n            }\r\n            else {\r\n                return this.expand(null, this.expanded);\r\n            }\r\n        }\r\n        else {\r\n            arrayToGroup.forEach((row) => {\r\n                row.__groupLvl = 0;\r\n            });\r\n            this.grouping = [];\r\n            return arrayToGroup;\r\n        }\r\n    }\r\n    getGrouping() {\r\n        return this.grouping;\r\n    }\r\n    expand(id, array) {\r\n        let all = id ? false : true;\r\n        if (!id) {\r\n            if (array) {\r\n                all = false;\r\n            }\r\n        }\r\n        if (!array) {\r\n            array = new Set([]);\r\n        }\r\n        let subGroup;\r\n        const collection = [];\r\n        const mainGroups = this.groups[0];\r\n        subGroup = (g) => {\r\n            g.__groupChildren.forEach((sg) => {\r\n                collection.push(sg);\r\n                switch (true) {\r\n                    case all:\r\n                    case sg.__groupID === id:\r\n                    case array.has(sg.__groupID):\r\n                    case sg.__groupID !== id && sg.__groupExpanded:\r\n                        if (sg.__groupChildren) {\r\n                            sg.__groupExpanded = true;\r\n                            this.expanded.add(sg.__groupID);\r\n                            subGroup(sg);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        };\r\n        mainGroups.forEach((g) => {\r\n            collection.push(g);\r\n            switch (true) {\r\n                case all:\r\n                case g.__groupID === id:\r\n                case array.has(g.__groupID):\r\n                case g.__groupID !== id && g.__groupExpanded:\r\n                    g.__groupExpanded = true;\r\n                    this.expanded.add(g.__groupID);\r\n                    if (g.__groupChildren) {\r\n                        subGroup(g);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n        return collection;\r\n    }\r\n    collapse(id) {\r\n        const all = id ? false : true;\r\n        id = id === undefined ? null : id;\r\n        let subGroup;\r\n        const collection = [];\r\n        const mainGroups = this.groups[0];\r\n        subGroup = (g) => {\r\n            g.__groupChildren.forEach((sg) => {\r\n                switch (true) {\r\n                    case all:\r\n                        if (sg.__groupChildren) {\r\n                            sg.__groupExpanded = false;\r\n                            this.expanded.delete(sg.__groupID);\r\n                            subGroup(sg);\r\n                        }\r\n                        break;\r\n                    case sg.__groupID === id:\r\n                        collection.push(sg);\r\n                        this.expanded.delete(sg.__groupID);\r\n                        sg.__groupExpanded = false;\r\n                        break;\r\n                    default:\r\n                        collection.push(sg);\r\n                        if (sg.__groupChildren && sg.__groupExpanded) {\r\n                            subGroup(sg);\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n        };\r\n        mainGroups.forEach((g) => {\r\n            collection.push(g);\r\n            switch (true) {\r\n                case all:\r\n                    g.__groupExpanded = false;\r\n                    this.expanded.delete(g.__groupID);\r\n                    if (g.__groupChildren) {\r\n                        subGroup(g);\r\n                    }\r\n                    break;\r\n                case g.__groupID === id:\r\n                    g.__groupExpanded = false;\r\n                    this.expanded.delete(g.__groupID);\r\n                    break;\r\n                default:\r\n                    if (g.__groupChildren && g.__groupExpanded) {\r\n                        subGroup(g);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        return collection;\r\n    }\r\n    groupMain(array, groupBy, groupNo) {\r\n        const tempGroupArray = [];\r\n        let curGroup = {};\r\n        let tempValue = null;\r\n        array.forEach((element) => {\r\n            let gidm = element[groupBy];\r\n            gidm = typeof gidm === 'boolean' ? gidm.toString() : gidm;\r\n            gidm = gidm || 'blank';\r\n            if (gidm !== tempValue) {\r\n                curGroup = {\r\n                    __groupName: gidm || 'blank',\r\n                    __group: true,\r\n                    __groupID: gidm,\r\n                    __groupLvl: groupNo,\r\n                    __groupChildren: [element],\r\n                    __groupTotal: 1,\r\n                    __groupExpanded: false\r\n                };\r\n                element.__groupLvl = groupNo + 1;\r\n                tempValue = gidm;\r\n                tempGroupArray.push(curGroup);\r\n            }\r\n            else {\r\n                element.__groupLvl = groupNo + 1;\r\n                curGroup.__groupChildren.push(element);\r\n                curGroup.__groupTotal++;\r\n            }\r\n        });\r\n        return tempGroupArray;\r\n    }\r\n    groupChildren(childGroupArray, groupBy, groupNo) {\r\n        const tempGroupArray = [];\r\n        let curGroup = {};\r\n        childGroupArray.forEach((element) => {\r\n            let tempValue = null;\r\n            const rebuiltChildrenArray = [];\r\n            element.__groupChildren.forEach((child) => {\r\n                if (child[groupBy] !== tempValue) {\r\n                    const gidm = child[groupBy] || 'blank';\r\n                    const gidc = element.__groupID || 'blank';\r\n                    curGroup = {\r\n                        __groupName: child[groupBy],\r\n                        __groupID: gidm + '-' + gidc,\r\n                        __group: true,\r\n                        __groupLvl: groupNo,\r\n                        __groupChildren: [child],\r\n                        __groupTotal: 1,\r\n                        __groupExpanded: false\r\n                    };\r\n                    child.__groupLvl = groupNo + 1;\r\n                    tempValue = child[groupBy];\r\n                    rebuiltChildrenArray.push(curGroup);\r\n                    tempGroupArray.push(curGroup);\r\n                }\r\n                else {\r\n                    child.__groupLvl = groupNo + 1;\r\n                    curGroup.__groupChildren.push(child);\r\n                    curGroup.__groupTotal++;\r\n                }\r\n            });\r\n            element.__groupChildren = rebuiltChildrenArray;\r\n        });\r\n        return tempGroupArray;\r\n    }\r\n}\r\nexports.ArrayGrouping = ArrayGrouping;\r\n//# sourceMappingURL=arrayGrouping.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860168,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
