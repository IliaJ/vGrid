module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass GridConnector {\r\n    constructor(datasource, selection, errorHandler) {\r\n        this.initTop = 0;\r\n        this.controller = null;\r\n        this.datasource = datasource;\r\n        this.selection = selection || datasource.getSelection();\r\n        this.errorhandler = errorHandler || this.errorhandler;\r\n    }\r\n    setInitTop(top) {\r\n        this.initTop = top;\r\n    }\r\n    getSelection() {\r\n        return this.selection;\r\n    }\r\n    connect(controller, create) {\r\n        this.controller = controller;\r\n        if (typeof this.datasource.addEventListener === 'function') {\r\n            this.eventID = this.datasource.addEventListener(this.eventHandler.bind(this));\r\n        }\r\n        this.controller.element.style.visibility = 'hidden';\r\n        create();\r\n    }\r\n    gridCreated() {\r\n        this.raiseEvent('sortIconUpdate');\r\n        this.controller.updateHeights();\r\n        setTimeout(() => {\r\n            this.controller.updateHeaderGrouping(this.datasource.getGrouping());\r\n            this.raiseEvent('sortIconUpdate');\r\n            this.raiseEvent('filterUpdateValues');\r\n            this.controller.triggerScroll(this.initTop);\r\n            setTimeout(() => {\r\n                this.controller.element.style.visibility = 'visible';\r\n            }, 100);\r\n        }, 0);\r\n    }\r\n    select(row) {\r\n        if (typeof this.datasource.select === 'function') {\r\n            this.datasource.select(row);\r\n        }\r\n    }\r\n    getRowHeightState() {\r\n        if (typeof this.datasource.getRowHeightState === 'function') {\r\n            return this.datasource.getRowHeightState();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    getDatasourceLength() {\r\n        return this.datasource.length();\r\n    }\r\n    getColConfig() {\r\n        return this.controller.getColumnConfig();\r\n    }\r\n    setColConfig(colconfig) {\r\n        this.controller.setColumnConfig(colconfig);\r\n    }\r\n    getGrouping() {\r\n        if (typeof this.datasource.getGrouping === 'function') {\r\n            return this.datasource.getGrouping();\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n    group(grouping, keepExpanded) {\r\n        this.controller.setLoadingScreen(true, null, this.getDatasourceLength()).then(() => {\r\n            if (typeof this.datasource.group === 'function') {\r\n                this.datasource.group(grouping, keepExpanded);\r\n            }\r\n        });\r\n    }\r\n    getElement(options) {\r\n        const rowData = this.datasource.getElement(options.row);\r\n        const rowContext = {\r\n            row: options.row,\r\n            selection: this.selection,\r\n            rowRef: rowData,\r\n            tempRef: this.getRowProperties(rowData)\r\n        };\r\n        options.callback(rowContext);\r\n    }\r\n    query(a) {\r\n        this.controller.setLoadingScreen(true, null, this.getDatasourceLength()).then(() => {\r\n            if (typeof this.datasource.query === 'function') {\r\n                this.datasource.query(a);\r\n            }\r\n        });\r\n    }\r\n    orderBy(attribute, addToCurrentSort) {\r\n        this.controller.setLoadingScreen(true, null, this.getDatasourceLength()).then(() => {\r\n            if (typeof this.datasource.orderBy === 'function') {\r\n                this.datasource.orderBy(attribute, addToCurrentSort);\r\n            }\r\n        });\r\n    }\r\n    destroy() {\r\n        if (typeof this.datasource.removeEventListener === 'function') {\r\n            this.datasource.removeEventListener(this.eventID);\r\n        }\r\n    }\r\n    getCurrentOrderBy() {\r\n        if (typeof this.datasource.getCurrentOrderBy === 'function') {\r\n            return this.datasource.getCurrentOrderBy();\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n    updateRowData(attribute, data, rows) {\r\n        if (typeof this.datasource.updateRowData === 'function') {\r\n            this.datasource.updateRowData(attribute, data, rows);\r\n        }\r\n    }\r\n    getCurrentFilter() {\r\n        if (typeof this.datasource.getCurrentFilter === 'function') {\r\n            return this.datasource.getCurrentFilter();\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n    expandGroup(id) {\r\n        this.controller.setLoadingScreen(true, null, this.getDatasourceLength()).then(() => {\r\n            if (typeof this.datasource.groupExpand === 'function') {\r\n                this.datasource.groupExpand(id);\r\n            }\r\n        });\r\n    }\r\n    collapseGroup(id) {\r\n        this.controller.setLoadingScreen(true, null, this.getDatasourceLength()).then(() => {\r\n            if (typeof this.datasource.groupCollapse === 'function') {\r\n                this.datasource.groupCollapse(id);\r\n            }\r\n        });\r\n    }\r\n    getTopRow() {\r\n        return this.controller.getTopRow();\r\n    }\r\n    triggerI18n() {\r\n        this.controller.triggerI18N();\r\n    }\r\n    raiseEvent(name, data = {}) {\r\n        const event = new CustomEvent(name, {\r\n            detail: data,\r\n            bubbles: true\r\n        });\r\n        if (this.controller) {\r\n            this.controller.element.dispatchEvent(event);\r\n        }\r\n    }\r\n    eventHandler(event) {\r\n        switch (event) {\r\n            case 'collection_changed':\r\n            case 'collection_grouped':\r\n            case 'collection_collapsed_all':\r\n            case 'collection_expanded_all':\r\n                this.raiseEvent('sortIconUpdate');\r\n                this.controller.updateHeights();\r\n                this.controller.udateHorizontalScroller();\r\n                this.controller.triggerScroll(0);\r\n                this.controller.updateHeaderGrouping(this.datasource.getGrouping());\r\n                this.controller.setLoadingScreen(false);\r\n                break;\r\n            case 'collection_collapsed':\r\n            case 'collection_expanded':\r\n            case 'collection_updated':\r\n                this.raiseEvent('sortIconUpdate');\r\n                this.controller.updateHeights();\r\n                this.controller.udateHorizontalScroller();\r\n                this.controller.triggerScroll(null);\r\n                this.controller.updateHeaderGrouping(this.datasource.getGrouping());\r\n                this.controller.setLoadingScreen(false);\r\n                break;\r\n            case 'collection_sorted':\r\n                this.raiseEvent('sortIconUpdate');\r\n                this.controller.rebindAllRows();\r\n                this.controller.triggerScroll(null);\r\n                this.controller.setLoadingScreen(false);\r\n                break;\r\n            case 'collection_filtered':\r\n                this.raiseEvent('sortIconUpdate');\r\n                this.controller.updateHeights();\r\n                this.controller.triggerScroll(null);\r\n                this.controller.setLoadingScreen(false);\r\n                break;\r\n            case 'selection_changed':\r\n                break;\r\n            default:\r\n                console.warn('unknown event');\r\n                console.warn(event);\r\n        }\r\n        return true;\r\n    }\r\n    getRowProperties(obj) {\r\n        const x = {};\r\n        if (obj) {\r\n            for (const k in obj) {\r\n                if (obj.hasOwnProperty(k)) {\r\n                    if (x[k] !== obj[k]) {\r\n                        x[k] = obj[k];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n}\r\nexports.GridConnector = GridConnector;\r\n//# sourceMappingURL=gridConnector.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860166,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
