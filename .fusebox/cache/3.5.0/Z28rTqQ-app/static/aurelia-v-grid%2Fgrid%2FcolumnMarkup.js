module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst aurelia_framework_1 = require(\"aurelia-framework\");\r\nconst columnMarkupHelper_1 = require(\"./columnMarkupHelper\");\r\nclass ColumnMarkup {\r\n    constructor(element, viewCompiler, container, viewResources, htmlCache, viewSlots, columnBindingContext) {\r\n        this.element = element;\r\n        this.htmlCache = htmlCache;\r\n        this.viewSlots = viewSlots;\r\n        this.columnBindingContext = columnBindingContext;\r\n        this.markupHelper = new columnMarkupHelper_1.ColumnMarkupHelper();\r\n        this.viewCompiler = viewCompiler;\r\n        this.container = container;\r\n        this.viewResources = viewResources;\r\n    }\r\n    init(colConfig, overrideContext, colRepeater, colRepeatRowTemplate, colRepeatRowHeaderTemplate, colGroup) {\r\n        this.overrideContext = overrideContext;\r\n        this.colConfig = colConfig;\r\n        this.configLength = colConfig.length;\r\n        this.colRepeater = colRepeater;\r\n        this.colRepeatRowTemplate = colRepeatRowTemplate;\r\n        this.colRepeatHeaderTemplate = colRepeatRowHeaderTemplate;\r\n        this.colGroup = colGroup;\r\n        this.updateInternalHtmlCache();\r\n        if (this.colConfig.length > 0) {\r\n            this.markupHelper.generate(this.colConfig);\r\n        }\r\n        this.generateColumns();\r\n    }\r\n    getRowViews(type) {\r\n        let viewMarkup = '';\r\n        let markupArray = [];\r\n        if (type === 'group') {\r\n            let defaultMarkup = [\r\n                '<i click.delegate=\"changeGrouping(rowRef)\">',\r\n                '<svg class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">',\r\n                '<path show.bind=\"rowRef.__groupExpanded\" d=\"M4.8 7.5h6.5v1H4.8z\"/>',\r\n                '<path show.bind=\"!rowRef.__groupExpanded\" d=\"M7.4 4.8v2.7H4.7v1h2.7v3h1v-3h2.8v-1H8.5V4.8h-1z\"/>',\r\n                '</svg>',\r\n                '</i>&nbsp;${rowRef.__groupName} (${rowRef.__groupTotal})'\r\n            ];\r\n            let gTemplate = this.colGroup || defaultMarkup.join('');\r\n            markupArray = [\r\n                '<avg-col ',\r\n                'class=\"avg-col-group\"',\r\n                'if.bind=\"rowRef.__group ===true\"',\r\n                'css=\"left:${rowRef.__groupLvl ? rowRef.__groupLvl *15:0}px;right:0\">',\r\n                gTemplate,\r\n                '</avg-col>'\r\n            ];\r\n            viewMarkup = markupArray.join('');\r\n        }\r\n        else {\r\n            if (this.colRepeater && type === 'main') {\r\n                let style = 'style=\"left:0;right:0\"';\r\n                viewMarkup = `<avg-repeat \\\r\n                        class=\"avg-col\" \\\r\n                        if.bind=\"rowRef.__group !== true\" ${style}>${this.colRepeatRowTemplate}\\\r\n                      </avg-repeat>`;\r\n            }\r\n            else {\r\n                for (let i = 0; i < this.configLength; i++) {\r\n                    let style;\r\n                    switch (type) {\r\n                        case 'left':\r\n                            style = 'css=\"width:${setupleft[' + i + '].width}px;\\\r\n                            left:${setupleft[' + i + '].left+ (setupgrouping * 15)}px\"';\r\n                            break;\r\n                        case 'main':\r\n                            style = 'css=\"width:${setupmain[' + i + '].width}px;\\\r\n                            left:${setupmain[' + i + '].left}px\"';\r\n                            break;\r\n                        case 'right':\r\n                            style = 'css=\"width:${setupright[' + i + '].width}px;\\\r\n                            left:${setupright[' + i + '].left}px\"';\r\n                            break;\r\n                        default:\r\n                    }\r\n                    let template = this.colConfig[i].__colRowTemplateGenerated;\r\n                    let colMarkup = `<avg-col \\\r\n                              class=\"avg-col\" \\\r\n                              data-avg-type=\"${type}\" \\\r\n                              data-avg-config-col=\"${i}\" \\\r\n                              if.bind=\"setup${type}[${i}].show && rowRef.__group !== true\" ${style}>${template}\\\r\n                          </avg-col>`;\r\n                    viewMarkup = viewMarkup + colMarkup;\r\n                }\r\n            }\r\n        }\r\n        let groupingBlock = '';\r\n        if (type === 'left') {\r\n            groupingBlock = '<avg-col \\\r\n      class=\"avg-col-grouping\" \\\r\n      css=\"left:0px;width:${rowRef.__groupLvl ? rowRef.__groupLvl *15:0}px\"></avg-col>';\r\n        }\r\n        return this.viewCompiler.compile(`<template>${groupingBlock + viewMarkup}</template>`, this.viewResources);\r\n    }\r\n    createColSetupContext(type) {\r\n        let leftCur = 0;\r\n        for (let i = 0; i < this.configLength; i++) {\r\n            let widthCur = this.colConfig[i].colWidth;\r\n            let showme = false;\r\n            switch (type) {\r\n                case 'left':\r\n                    showme = !this.colConfig[i].colHidden && this.colConfig[i].colPinLeft;\r\n                    break;\r\n                case 'main':\r\n                    showme = !this.colConfig[i].colPinLeft && !this.colConfig[i].colPinRight && !this.colConfig[i].colHidden;\r\n                    break;\r\n                case 'right':\r\n                    showme = !this.colConfig[i].colHidden && this.colConfig[i].colPinRight;\r\n                    break;\r\n                default:\r\n            }\r\n            this.columnBindingContext['setup' + type].push({\r\n                width: widthCur,\r\n                show: showme,\r\n                left: leftCur,\r\n                colConfig: this.colConfig[i]\r\n            });\r\n            if (showme) {\r\n                leftCur = leftCur + widthCur;\r\n            }\r\n        }\r\n    }\r\n    getHeaderViews(type) {\r\n        let viewMarkup = '';\r\n        if (this.colRepeater && type === 'main' && this.colRepeatHeaderTemplate) {\r\n            let style = 'css=\"left:0;right:0\"';\r\n            viewMarkup = `<div class=\"avg-col\" ${style}>${this.colRepeatHeaderTemplate}</div>`;\r\n        }\r\n        else {\r\n            for (let i = 0; i < this.configLength; i++) {\r\n                let style;\r\n                switch (type) {\r\n                    case 'left':\r\n                        style = 'css=\"width:${setupleft[' + i + '].width}px;\\\r\n                          left:${setupleft[' + i + '].left + (setupgrouping * 15)}px\"';\r\n                        break;\r\n                    case 'main':\r\n                        style = 'css=\"width:${setupmain[' + i + '].width}px;\\\r\n                          left:${setupmain[' + i + '].left}px\"';\r\n                        break;\r\n                    case 'right':\r\n                        style = 'css=\"width:${setupright[' + i + '].width}px;\\\r\n                          left:${setupright[' + i + '].left}px\"';\r\n                        break;\r\n                    default:\r\n                }\r\n                let template = this.colConfig[i].__colHeaderTemplateGenerated;\r\n                let colMarkup = `<avg-col \\\r\n                            data-avg-type=\"${type}\" \\\r\n                            data-avg-config-col=\"${i}\" \\\r\n                            class=\"avg-col\" \\\r\n                            if.bind=\"setup${type}[${i}].show\" \\\r\n                            ${style}>${template}\\\r\n                          </avg-col>`;\r\n                viewMarkup = viewMarkup + colMarkup;\r\n            }\r\n        }\r\n        let groupingBlock = '';\r\n        if (type === 'left') {\r\n            groupingBlock = '<avg-col \\\r\n                          class=\"avg-col-grouping-header\" \\\r\n                          css=\"left:0px;width:${setupgrouping ? (setupgrouping * 15):0}px\"> \\\r\n                       </avg-col>';\r\n        }\r\n        return this.viewCompiler.compile(`<template>${groupingBlock + viewMarkup}</template>`, this.viewResources);\r\n    }\r\n    generateColumns() {\r\n        if (this.columnBindingContext.setupmain.length === 0) {\r\n            this.createColSetupContext('left');\r\n            this.createColSetupContext('main');\r\n            this.createColSetupContext('right');\r\n            this.createColSetupContext('group');\r\n        }\r\n        let viewFactoryLeft = this.getRowViews('left');\r\n        let viewFactoryMain = this.getRowViews('main');\r\n        let viewFactoryRight = this.getRowViews('right');\r\n        let viewFactoryGroup = this.getRowViews('group');\r\n        for (let i = 0; i < this.rowLength; i++) {\r\n            this.viewSlots.leftRowViewSlots[i] = this.createViewSlot(this.htmlCache.rowCache[i].left, viewFactoryLeft);\r\n            this.viewSlots.mainRowViewSlots[i] = this.createViewSlot(this.htmlCache.rowCache[i].main, viewFactoryMain);\r\n            this.viewSlots.rightRowViewSlots[i] = this.createViewSlot(this.htmlCache.rowCache[i].right, viewFactoryRight);\r\n            this.viewSlots.groupRowViewSlots[i] = this.createViewSlot(this.htmlCache.rowCache[i].group, viewFactoryGroup);\r\n            this.htmlCache.rowCache[i].leftRowViewSlot = this.viewSlots.leftRowViewSlots[i];\r\n            this.htmlCache.rowCache[i].mainRowViewSlot = this.viewSlots.mainRowViewSlots[i];\r\n            this.htmlCache.rowCache[i].rightRowViewSlot = this.viewSlots.rightRowViewSlots[i];\r\n            this.htmlCache.rowCache[i].groupRowViewSlot = this.viewSlots.groupRowViewSlots[i];\r\n        }\r\n        let viewFactoryHeaderLeft = this.getHeaderViews('left');\r\n        let viewFactoryHeaderMain = this.getHeaderViews('main');\r\n        let viewFactoryHeaderRight = this.getHeaderViews('right');\r\n        this.viewSlots.leftHeaderViewSlot = this.createViewSlot(this.leftHeader, viewFactoryHeaderLeft);\r\n        this.viewSlots.mainHeaderViewSlot = this.createViewSlot(this.mainHeader, viewFactoryHeaderMain);\r\n        this.viewSlots.rightHeaderViewSlot = this.createViewSlot(this.rightHeader, viewFactoryHeaderRight);\r\n    }\r\n    createViewSlot(element, viewFactory) {\r\n        let view = viewFactory.create(this.container);\r\n        let viewSlot = new aurelia_framework_1.ViewSlot(element, true);\r\n        viewSlot.add(view);\r\n        return viewSlot;\r\n    }\r\n    updateInternalHtmlCache() {\r\n        this.leftScroll = this.htmlCache.avg_content_left_scroll;\r\n        this.mainScroll = this.htmlCache.avg_content_main_scroll;\r\n        this.rightScroll = this.htmlCache.avg_content_right_scroll;\r\n        this.groupScroll = this.htmlCache.avg_content_group_scroll;\r\n        this.leftHeader = this.htmlCache.avg_header_left;\r\n        this.mainHeader = this.htmlCache.avg_header_main_scroll;\r\n        this.rightHeader = this.htmlCache.avg_header_right;\r\n        this.leftRows = this.htmlCache.avg_left_rows;\r\n        this.mainRows = this.htmlCache.avg_main_rows;\r\n        this.rightRows = this.htmlCache.avg_right_rows;\r\n        this.groupRows = this.htmlCache.avg_group_rows;\r\n        this.rowLength = this.leftRows.length;\r\n    }\r\n}\r\nexports.ColumnMarkup = ColumnMarkup;\r\n//# sourceMappingURL=columnMarkup.js.map",
dependencies: ["aurelia-framework","./columnMarkupHelper"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860152,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
