module.exports = { contents: "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _a, _b;\r\nconst aurelia_framework_1 = require(\"aurelia-framework\");\r\nconst v_grid_1 = require(\"../v-grid\");\r\nlet VGridAttributesResizeCol = class VGridAttributesResizeCol {\r\n    constructor(element, vGrid) {\r\n        this.vGrid = vGrid;\r\n        this.ctx = vGrid.resizeAttributeSharedContext;\r\n        this.element = element;\r\n        this.screenX = 0;\r\n        this.originalWidth = 0;\r\n        this.column = this.element;\r\n        while (this.column.nodeName !== 'AVG-COL') {\r\n            this.column = this.column.parentNode;\r\n        }\r\n        this.colType = this.column.attributes.getNamedItem('data-avg-type').value;\r\n        this.colNo = parseInt(this.column.attributes.getNamedItem('data-avg-config-col').value, 10);\r\n        this.context = vGrid.columnBindingContext['setup' + this.colType][this.colNo];\r\n        this.columnsArray = vGrid.columnBindingContext['setup' + this.colType];\r\n        this.columnBindingContext = vGrid.columnBindingContext;\r\n    }\r\n    bind(bindingContext, overrideContext) {\r\n        this.bindingContext = bindingContext;\r\n        this.overrideContext = overrideContext;\r\n    }\r\n    attached() {\r\n        let resizeHandle = document.createElement('DIV');\r\n        resizeHandle.classList.add('avg-draggable-handler');\r\n        this.onmousedownBinded = this.onmousedown.bind(this);\r\n        this.onmousemoveBinded = this.onmousemove.bind(this);\r\n        this.onmouseupBinded = this.onmouseup.bind(this);\r\n        resizeHandle.onmousedown = (e) => {\r\n            this.ctx.resizing = true;\r\n            this.onmousedown(e);\r\n        };\r\n        this.column.appendChild(resizeHandle);\r\n    }\r\n    onmouseup() {\r\n        document.removeEventListener('mousemove', this.onmousemoveBinded);\r\n        document.removeEventListener('mouseup', this.onmouseupBinded);\r\n        this.ctx.resizing = false;\r\n    }\r\n    onmousemove(e) {\r\n        e.preventDefault();\r\n        e.preventDefault();\r\n        this.updateHeader(e);\r\n    }\r\n    updateHeader(e) {\r\n        let w = Math.abs(this.screenX - e.screenX);\r\n        if (w % 2 === 0) {\r\n            requestAnimationFrame(() => {\r\n                let movementX = this.originalWidth - (this.screenX - e.screenX);\r\n                let appendValue = this.originalWidth - movementX;\r\n                if (this.colType === 'main' && movementX > 10) {\r\n                    this.columnsArray[this.colNo].width = movementX;\r\n                    this.vGrid.colConfig[this.colNo].colWidth = this.columnsArray[this.colNo].width;\r\n                    for (let i = 0; i < this.columnsArray.length; i++) {\r\n                        if (this.columnsArray[this.colNo].left < this.columnsArray[i].left) {\r\n                            this.columnsArray[i].left = this.originals[i] - appendValue;\r\n                        }\r\n                    }\r\n                    this.vGrid.htmlHeightWidth.avgContentMainScroll_Width = this.avgContentMainScroll_Width - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgContentHhandleScroll_Width = this.avgContentHhandleScroll_Width - appendValue;\r\n                }\r\n                if (this.colType === 'right' && movementX > 10) {\r\n                    this.columnsArray[this.colNo].width = movementX;\r\n                    this.vGrid.colConfig[this.colNo].colWidth = this.columnsArray[this.colNo].width;\r\n                    for (let i = 0; i < this.columnsArray.length; i++) {\r\n                        if (this.columnsArray[this.colNo].left < this.columnsArray[i].left) {\r\n                            this.columnsArray[i].left = this.originals[i] - appendValue;\r\n                        }\r\n                    }\r\n                    this.vGrid.htmlHeightWidth.avgContentRight_Width = this.avgContentRight_Width - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgHeaderRight_Width = this.avgHeaderRight_Width - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgContentMain_Right = this.avgContentMain_Right - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgHeaderMain_Right = this.avgHeaderMain_Right - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgContentHhandle_Right = this.avgContentHhandle_Right - appendValue;\r\n                }\r\n                if (this.colType === 'left' && movementX > 10) {\r\n                    this.columnsArray[this.colNo].width = movementX;\r\n                    this.vGrid.colConfig[this.colNo].colWidth = this.columnsArray[this.colNo].width;\r\n                    for (let i = 0; i < this.columnsArray.length; i++) {\r\n                        if (this.columnsArray[this.colNo].left < this.columnsArray[i].left) {\r\n                            this.columnsArray[i].left = this.originals[i] - appendValue;\r\n                        }\r\n                    }\r\n                    this.vGrid.htmlHeightWidth.avgContentLeft_Width = this.avgContentLeft_Width - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgHeaderLeft_Width = this.avgHeaderLeft_Width - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgContentMain_Left = this.avgContentMain_Left - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgHeaderMain_Left = this.avgHeaderMain_Left - appendValue;\r\n                    this.vGrid.htmlHeightWidth.avgContentHhandle_Left = this.avgContentHhandle_Left - appendValue;\r\n                }\r\n                this.vGrid.controller.udateHorizontalScroller();\r\n            });\r\n        }\r\n    }\r\n    onmousedown(e) {\r\n        this.screenX = e.screenX;\r\n        this.originalWidth = this.context.width;\r\n        this.originals = [];\r\n        for (let i = 0; i < this.columnsArray.length; i++) {\r\n            this.originals.push(this.columnsArray[i].left);\r\n        }\r\n        this.avgContentLeft_Width = this.vGrid.htmlHeightWidth.avgContentLeft_Width;\r\n        this.avgHeaderLeft_Width = this.vGrid.htmlHeightWidth.avgHeaderLeft_Width;\r\n        this.avgContentMainScroll_Width = this.vGrid.htmlHeightWidth.avgContentMainScroll_Width;\r\n        this.avgHeaderMain_Left = this.vGrid.htmlHeightWidth.avgHeaderMain_Left;\r\n        this.avgContentMain_Left = this.vGrid.htmlHeightWidth.avgContentMain_Left;\r\n        this.avgContentMain_Right = this.vGrid.htmlHeightWidth.avgContentMain_Right;\r\n        this.avgHeaderMain_Right = this.vGrid.htmlHeightWidth.avgHeaderMain_Right;\r\n        this.avgContentRight_Width = this.vGrid.htmlHeightWidth.avgContentRight_Width;\r\n        this.avgHeaderRight_Width = this.vGrid.htmlHeightWidth.avgHeaderRight_Width;\r\n        this.avgContentHhandle_Right = this.vGrid.htmlHeightWidth.avgContentHhandle_Right;\r\n        this.avgContentHhandle_Left = this.vGrid.htmlHeightWidth.avgContentHhandle_Left;\r\n        this.avgContentHhandleScroll_Width = this.vGrid.htmlHeightWidth.avgContentHhandleScroll_Width;\r\n        this.avgContentMainScrollLeft = this.vGrid.htmlCache.avg_content_main.scrollLeft;\r\n        if (this.colType === 'main') {\r\n            this.isLast = this.vGrid.htmlHeightWidth.avgContentMainScroll_Width === (this.context.left + this.context.width);\r\n        }\r\n        if (this.colType === 'left') {\r\n            let sumContext = this.context.left + this.context.width + this.vGrid.htmlHeightWidth.avgScrollBarWidth;\r\n            let sumGrouping = this.columnBindingContext.setupgrouping * 15;\r\n            this.isLast = this.vGrid.htmlHeightWidth.avgContentLeft_Width === (sumContext + sumGrouping);\r\n        }\r\n        if (this.colType === 'right') {\r\n            let sum = this.context.left + this.context.width + this.vGrid.htmlHeightWidth.avgScrollBarWidth;\r\n            this.isLast = this.vGrid.htmlHeightWidth.avgContentRight_Width === sum;\r\n        }\r\n        let setupRight = this.vGrid.columnBindingContext.setupright;\r\n        this.rightColNo = 0;\r\n        this.rightColNoWidth = 0;\r\n        setupRight.forEach((col, i) => {\r\n            if (col.left === 0) {\r\n                this.rightColNo = i;\r\n                this.rightColNoWidth = col.width;\r\n            }\r\n        });\r\n        document.addEventListener('mousemove', this.onmousemoveBinded);\r\n        document.addEventListener('mouseup', this.onmouseupBinded);\r\n    }\r\n};\r\nVGridAttributesResizeCol = __decorate([\r\n    aurelia_framework_1.customAttribute('v-resize-col'),\r\n    aurelia_framework_1.inject(Element, v_grid_1.VGrid),\r\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof Element !== \"undefined\" && Element) === \"function\" ? _a : Object, typeof (_b = typeof v_grid_1.VGrid !== \"undefined\" && v_grid_1.VGrid) === \"function\" ? _b : Object])\r\n], VGridAttributesResizeCol);\r\nexports.VGridAttributesResizeCol = VGridAttributesResizeCol;\r\n//# sourceMappingURL=v-resize-col.js.map",
dependencies: ["aurelia-framework","../v-grid"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860151,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
