module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass RowClickHandler {\r\n    constructor(element, htmlCache) {\r\n        this.element = element;\r\n        this.htmlCache = htmlCache;\r\n        this.selectionMode = 'none';\r\n        this.lastRowSelected = -1;\r\n        this.lastKeyKodeUsed = 'none';\r\n        this.selectedRows = 0;\r\n    }\r\n    init(mode, manualSelection, controller) {\r\n        this.controller = controller;\r\n        this.getSelection = controller.getSelectionContext.bind(controller);\r\n        this.manualSelection = manualSelection;\r\n        if (mode === false) {\r\n            this.selectionMode = 'single';\r\n        }\r\n        if (mode === true) {\r\n            this.selectionMode = 'multiple';\r\n        }\r\n        this.addEventlistener();\r\n    }\r\n    updateSelectionOnAllRows() {\r\n        let rowCache = this.htmlCache.rowCache;\r\n        for (let i = 0; i < rowCache.length; i++) {\r\n            let selection = this.getSelection();\r\n            let isSelected = selection.isSelected(rowCache[i].row);\r\n            rowCache[i].bindingContext.selected = isSelected;\r\n            rowCache[i].bindingContext.selected = isSelected;\r\n            rowCache[i].bindingContext.selected = isSelected;\r\n            if (isSelected) {\r\n                if (!rowCache[i].selected) {\r\n                    rowCache[i].selected = true;\r\n                    rowCache[i].left.classList.add('avg-selected-row');\r\n                    rowCache[i].main.classList.add('avg-selected-row');\r\n                    rowCache[i].right.classList.add('avg-selected-row');\r\n                }\r\n            }\r\n            else {\r\n                if (rowCache[i].selected) {\r\n                    rowCache[i].selected = false;\r\n                    rowCache[i].left.classList.remove('avg-selected-row');\r\n                    rowCache[i].main.classList.remove('avg-selected-row');\r\n                    rowCache[i].right.classList.remove('avg-selected-row');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getSelectionMode() {\r\n        let selection = this.getSelection();\r\n        return selection.getMode();\r\n    }\r\n    removeEventlistener() {\r\n        let avgLeftRows = this.htmlCache.avg_left_rows;\r\n        let avgMainRows = this.htmlCache.avg_main_rows;\r\n        let avgRightRows = this.htmlCache.avg_right_rows;\r\n        for (let i = 0; i < avgLeftRows.length; i++) {\r\n            avgLeftRows[i].onclick = null;\r\n            avgLeftRows[i].ondblclick = null;\r\n            avgMainRows[i].onclick = null;\r\n            avgMainRows[i].ondblclick = null;\r\n            avgRightRows[i].onclick = null;\r\n            avgRightRows[i].ondblclick = null;\r\n        }\r\n    }\r\n    addEventlistener() {\r\n        let avgLeftRows = this.htmlCache.avg_left_rows;\r\n        let avgMainRows = this.htmlCache.avg_main_rows;\r\n        let avgRightRows = this.htmlCache.avg_right_rows;\r\n        for (let i = 0; i < avgLeftRows.length; i++) {\r\n            avgLeftRows[i].onclick = this.singleClick.bind(this);\r\n            avgLeftRows[i].ondblclick = this.doubleClick.bind(this);\r\n            avgMainRows[i].onclick = this.singleClick.bind(this);\r\n            avgMainRows[i].ondblclick = this.doubleClick.bind(this);\r\n            avgRightRows[i].onclick = this.singleClick.bind(this);\r\n            avgRightRows[i].ondblclick = this.doubleClick.bind(this);\r\n        }\r\n    }\r\n    getCache(target) {\r\n        let no = -1;\r\n        this.htmlCache.rowCache.forEach((row, i) => {\r\n            if (row.left === target) {\r\n                no = i;\r\n            }\r\n            if (row.main === target) {\r\n                no = i;\r\n            }\r\n            if (row.right === target) {\r\n                no = i;\r\n            }\r\n            if (row.group === target) {\r\n                no = i;\r\n            }\r\n        });\r\n        if (no !== -1) {\r\n            return this.htmlCache.rowCache[no];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    singleClick(event) {\r\n        let cache = this.getCache(event.currentTarget) || {};\r\n        if (!cache.isGroup) {\r\n            this.highlightRow(event, cache.row);\r\n            this.controller.select(cache.row);\r\n        }\r\n        if (!this.manualSelection) {\r\n            this.controller.raiseEvent('v-row-onclick', {\r\n                evt: event,\r\n                data: cache.bindingContext.rowRef,\r\n                bindingContext: cache.bindingContext,\r\n                row: cache.row\r\n            });\r\n        }\r\n    }\r\n    doubleClick(event) {\r\n        let cache = this.getCache(event.currentTarget) || {};\r\n        this.controller.raiseEvent('v-row-ondblclick', {\r\n            evt: event,\r\n            data: cache.bindingContext.rowRef,\r\n            bindingContext: cache.bindingContext,\r\n            row: cache.row\r\n        });\r\n    }\r\n    isSelected(row) {\r\n        let selection = this.getSelection();\r\n        return selection.isSelected(row);\r\n    }\r\n    deSelect(row) {\r\n        let selection = this.getSelection();\r\n        selection.deSelect(row);\r\n    }\r\n    select(row, addToSelection) {\r\n        let selection = this.getSelection();\r\n        selection.select(row, addToSelection);\r\n    }\r\n    selectRange(start, end) {\r\n        let selection = this.getSelection();\r\n        selection.selectRange(start, end);\r\n    }\r\n    getSelectedRows() {\r\n        let selection = this.getSelection();\r\n        return selection.getSelectedRows();\r\n    }\r\n    setSelectedRows(newRows) {\r\n        let selection = this.getSelection();\r\n        selection.setSelectedRows(newRows);\r\n    }\r\n    highlightRow(e, currentRow) {\r\n        let isSel;\r\n        let manualSel = this.manualSelection;\r\n        if (!manualSel) {\r\n            let currentselectedRows = this.getSelectedRows();\r\n            let currentKeyKode = '';\r\n            if (currentRow !== this.lastRowSelected || currentselectedRows[0] !== currentRow) {\r\n                if (currentRow <= (this.controller.collectionLength() - 1)) {\r\n                    if (this.selectionMode === 'multiple') {\r\n                        if (e.shiftKey) {\r\n                            currentKeyKode = 'shift';\r\n                            currentselectedRows = this.getSelectedRows();\r\n                            if (currentselectedRows.length > 0 && this.lastKeyKodeUsed === 'none') {\r\n                                this.lastRowSelected = currentselectedRows[0];\r\n                                this.lastKeyKodeUsed = 'shift';\r\n                            }\r\n                        }\r\n                        if (e.ctrlKey) {\r\n                            currentKeyKode = 'ctrl';\r\n                        }\r\n                        if (!e.ctrlKey && !e.shiftKey) {\r\n                            currentKeyKode = 'none';\r\n                        }\r\n                        switch (true) {\r\n                            case currentKeyKode === 'none':\r\n                                this.select(currentRow, false);\r\n                                break;\r\n                            case this.lastKeyKodeUsed === 'shift' && currentKeyKode === 'ctrl':\r\n                                isSel = this.isSelected(currentRow);\r\n                                if (isSel === true) {\r\n                                    this.deSelect(currentRow);\r\n                                }\r\n                                else {\r\n                                    this.select(currentRow, true);\r\n                                }\r\n                                this.lastRowSelected = currentRow;\r\n                                break;\r\n                            case this.lastKeyKodeUsed === 'ctrl' && currentKeyKode === 'shift':\r\n                                let oldSel = this.getSelectedRows();\r\n                                this.selectRange(this.lastRowSelected, currentRow);\r\n                                let newSel = this.getSelectedRows();\r\n                                this.setSelectedRows(oldSel.concat(newSel));\r\n                                break;\r\n                            case this.lastKeyKodeUsed === 'ctrl' && currentKeyKode === 'ctrl':\r\n                                isSel = this.isSelected(currentRow);\r\n                                if (isSel === true) {\r\n                                    this.deSelect(currentRow);\r\n                                }\r\n                                else {\r\n                                    this.select(currentRow, true);\r\n                                }\r\n                                this.lastRowSelected = currentRow;\r\n                                break;\r\n                            case this.lastKeyKodeUsed === 'none' && currentKeyKode === 'ctrl':\r\n                                isSel = this.isSelected(currentRow);\r\n                                if (isSel === true) {\r\n                                    this.deSelect(currentRow);\r\n                                }\r\n                                else {\r\n                                    this.select(currentRow, true);\r\n                                }\r\n                                this.lastRowSelected = currentRow;\r\n                                break;\r\n                            case this.lastKeyKodeUsed === 'shift' && currentKeyKode === 'shift':\r\n                                if (this.lastRowSelected > currentRow) {\r\n                                    this.selectRange(currentRow, this.lastRowSelected);\r\n                                }\r\n                                else {\r\n                                    this.selectRange(this.lastRowSelected, currentRow);\r\n                                }\r\n                                break;\r\n                            case this.lastKeyKodeUsed === 'none' && currentKeyKode === 'shift':\r\n                                if (this.lastRowSelected !== -1) {\r\n                                    if (this.lastRowSelected > currentRow) {\r\n                                        this.selectRange(currentRow, this.lastRowSelected);\r\n                                    }\r\n                                    else {\r\n                                        this.selectRange(this.lastRowSelected, currentRow);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    this.lastRowSelected = currentRow;\r\n                                    this.select(currentRow, false);\r\n                                }\r\n                                break;\r\n                            default:\r\n                                console.error('error, this should not happen, debug selection');\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.select(currentRow, false);\r\n                    }\r\n                    this.lastKeyKodeUsed = currentKeyKode;\r\n                    this.updateSelectionOnAllRows();\r\n                }\r\n            }\r\n            else {\r\n                if (e.ctrlKey) {\r\n                    currentKeyKode = 'ctrl';\r\n                }\r\n                if (currentKeyKode === 'ctrl') {\r\n                    this.lastKeyKodeUsed = currentKeyKode;\r\n                    isSel = this.isSelected(currentRow);\r\n                    if (isSel === true) {\r\n                        this.deSelect(currentRow);\r\n                    }\r\n                    this.lastRowSelected = currentRow;\r\n                }\r\n                else {\r\n                    this.select(currentRow, false);\r\n                }\r\n                this.updateSelectionOnAllRows();\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.RowClickHandler = RowClickHandler;\r\n//# sourceMappingURL=rowClickHandler.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860157,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
