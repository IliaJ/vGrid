module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ColumnMarkupHelper {\r\n    generate(colConfig) {\r\n        let type = null;\r\n        if (colConfig && colConfig.length > 0) {\r\n            type = 'typeHtml';\r\n        }\r\n        if (!type) {\r\n            throw new Error('column setup missing');\r\n        }\r\n        this.processColumns(colConfig);\r\n    }\r\n    processColumns(array) {\r\n        array.forEach((col, index) => {\r\n            if (!col.colField && !col.colRowTemplate) {\r\n                if (col.colType !== 'selection') {\r\n                    throw new Error('colField is not set on column' + index);\r\n                }\r\n            }\r\n            col.colType = col.colType || 'text';\r\n            col.colFilterTop = col.colFilterTop || false;\r\n            col.colHeaderName = col.colHeaderName || this.getAttribute(col.colField, true);\r\n            col.colWidth = col.colWidth || 100;\r\n            col.colCss = col.colCss || '';\r\n            col.colField = this.checkAttribute(col.colField);\r\n            this.createHeaderTemplate(col);\r\n            this.createRowTemplate(col);\r\n            if (col.colRowTemplate) {\r\n                col.__colRowTemplateGenerated = col.colRowTemplate;\r\n            }\r\n            if (col.colHeaderTemplate) {\r\n                col.__colHeaderTemplateGenerated = col.colHeaderTemplate;\r\n            }\r\n        });\r\n    }\r\n    createHeaderTemplate(col) {\r\n        if (!col.colHeaderTemplate) {\r\n            let inputHeader;\r\n            let labelHeader;\r\n            switch (col.colType) {\r\n                case 'selection':\r\n                    labelHeader = '';\r\n                    inputHeader = `<input\r\n            class=\"avg-row-checkbox-100\"\r\n            v-selection=\"type:header;selected.bind:selected\"\r\n            type=\"checkbox\">`;\r\n                    break;\r\n                case 'image':\r\n                    inputHeader = '<p class=\"avg-label-top\"></p>';\r\n                    if (!col.colFilterTop) {\r\n                        col.colFilter = 'x';\r\n                    }\r\n                    labelHeader = this.createLabelMarkup(col);\r\n                    break;\r\n                default:\r\n                    inputHeader = this.createInputHeaderMarkup(col);\r\n                    labelHeader = this.createLabelMarkup(col);\r\n                    break;\r\n            }\r\n            if (col.colFilterTop) {\r\n                col.__colHeaderTemplateGenerated = inputHeader + labelHeader;\r\n            }\r\n            else {\r\n                col.__colHeaderTemplateGenerated = labelHeader + inputHeader;\r\n            }\r\n        }\r\n    }\r\n    createRowTemplate(col) {\r\n        if (!col.colRowTemplate) {\r\n            switch (col.colType) {\r\n                case 'selection':\r\n                    col.colRowTemplate = `<input\r\n            v-key-move\r\n            class=\"avg-row-checkbox-100\"\r\n            v-selection=\"type:row;selected.bind:selected\"\r\n            type=\"checkbox\" >`;\r\n                    break;\r\n                case 'image':\r\n                    this.createImageRowMarkup(col);\r\n                    break;\r\n                default:\r\n                    this.createInputRowMarkup(col);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    getAttribute(value, capitalize) {\r\n        let returnValue = value || 'missing!';\r\n        if (value) {\r\n            value = value.replace('rowRef.', '');\r\n            value = value.replace('tempRef.', '');\r\n            let newValue = '';\r\n            let done = false;\r\n            for (let x = 0; x < value.length; x++) {\r\n                let letter = value.charAt(x);\r\n                if (!done && letter !== ' ' && letter !== '&' && letter !== '|' && letter !== ':') {\r\n                    newValue = newValue + letter;\r\n                }\r\n                else {\r\n                    done = true;\r\n                }\r\n            }\r\n            if (capitalize) {\r\n                returnValue = newValue.charAt(0).toUpperCase() + newValue.slice(1);\r\n            }\r\n            else {\r\n                returnValue = newValue;\r\n            }\r\n        }\r\n        return returnValue;\r\n    }\r\n    checkAttribute(attribute) {\r\n        let value = attribute;\r\n        if (attribute) {\r\n            if (attribute.indexOf('rowRef') === -1 && attribute.indexOf('tempRef') === -1) {\r\n                value = 'rowRef.' + attribute;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    createImageRowMarkup(col) {\r\n        let classNames = 'class=\"avg-image-round\"';\r\n        let attributeRow = col.colAddRowAttributes ? col.colAddRowAttributes : '';\r\n        let css = col.colCss ? `css=\"${col.colCss}\"` : '';\r\n        let imageFix = `v-image-fix.bind=\"${col.colField}\"`;\r\n        col.__colRowTemplateGenerated = `<image ${css} ${classNames} ${imageFix} ${attributeRow}>`;\r\n    }\r\n    createInputRowMarkup(col) {\r\n        let colClass = `class=\"${col.colType === 'checkbox' ? 'avg-row-checkbox-100' : 'avg-row-input'}\"`;\r\n        let colType = `type=\"${col.colType}\"`;\r\n        let colAddRowAttributes = col.colAddRowAttributes ? col.colAddRowAttributes : '';\r\n        let colRowMenu = col.colRowMenu ? `v-menu=\"${col.colRowMenu}\"` : '';\r\n        let colCss = col.colCss ? `css=\"${col.colCss}\"` : '';\r\n        if (col.colType === 'checkbox') {\r\n            col.__colRowTemplateGenerated = `<input\r\n        ${colCss}\r\n        ${colClass}\r\n        ${colType}\r\n        ${colAddRowAttributes}\r\n        ${colRowMenu}\r\n        checked.bind=\"${col.colField}\">`;\r\n        }\r\n        else {\r\n            let binding = `value.bind=\"${col.colField}\"`;\r\n            if (col.colDisplayEdit) {\r\n                binding = `v-data-handler=\"value.bind:${col.colField};${col.colDisplayEdit}\"`;\r\n            }\r\n            col.__colRowTemplateGenerated = `<input\r\n        ${colCss}\r\n        ${colClass}\r\n        ${colType}\r\n        ${colRowMenu}\r\n        ${colAddRowAttributes}\r\n        ${binding}>`;\r\n        }\r\n    }\r\n    createInputHeaderMarkup(col) {\r\n        let markup;\r\n        if (col.colFilter) {\r\n            let type = `type=\"${col.colType}\"`;\r\n            let filter = col.colFilter ? `v-filter=\"${col.colFilter}\"` : '';\r\n            let colAddFilterAttributes = col.colAddFilterAttributes ? col.colAddFilterAttributes : '';\r\n            let classNames = '';\r\n            if (col.colType === 'checkbox') {\r\n                classNames = `class=\"${col.colFilterTop ? 'avg-row-checkbox-50' : 'avg-row-checkbox-50'}\"`;\r\n            }\r\n            else {\r\n                classNames = `class=\"${col.colFilterTop ? 'avg-header-input-top' : 'avg-header-input-bottom'}\"`;\r\n            }\r\n            let colRowMenu = col.colFilterMenu ? `v-menu=\"${col.colFilterMenu}\"` : '';\r\n            markup = `<input ${colRowMenu} ${classNames} ${colAddFilterAttributes} ${type} ${filter}\">`;\r\n        }\r\n        else {\r\n            markup = '';\r\n        }\r\n        return markup;\r\n    }\r\n    createLabelMarkup(col) {\r\n        let filterClass = col.colFilter ? `${col.colFilterTop ? 'avg-label-bottom' : 'avg-label-top'}` : 'avg-label-full';\r\n        let dragDropClass = col.colDragDrop !== 'false' ? 'avg-vGridDragHandle' : '';\r\n        let classname = `class=\"${dragDropClass} ${filterClass}\"`;\r\n        let colAddLabelAttributes = col.colAddLabelAttributes ? col.colAddLabelAttributes : '';\r\n        let sort = col.colSort ? `v-sort=\"${col.colSort}\"` : '';\r\n        let colLabelMenu = col.colLabelMenu ? `v-menu=\"${col.colLabelMenu}\"` : '';\r\n        let colDragDrop = col.colDragDrop !== 'false' ? `v-drag-drop-col=\"${col.colDragDrop}\"` : '';\r\n        let colResizeable = col.colResizeable !== 'false' ? `v-resize-col` : '';\r\n        let extraAttributes = `${colDragDrop} ${colResizeable} ${colLabelMenu}`;\r\n        return `<p\r\n      ${extraAttributes}\r\n      ${classname}\r\n      ${sort}\r\n      ${colAddLabelAttributes}>\r\n      ${col.colHeaderName}\r\n      </p>`;\r\n    }\r\n}\r\nexports.ColumnMarkupHelper = ColumnMarkupHelper;\r\n//# sourceMappingURL=columnMarkupHelper.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860153,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
