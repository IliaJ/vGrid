module.exports = { contents: "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\nconst aurelia_framework_1 = require(\"aurelia-framework\");\r\nconst mainMarkup_1 = require(\"./mainMarkup\");\r\nconst mainScrollEvents_1 = require(\"./mainScrollEvents\");\r\nconst rowMarkup_1 = require(\"./rowMarkup\");\r\nconst rowScrollEvents_1 = require(\"./rowScrollEvents\");\r\nconst columnMarkup_1 = require(\"./columnMarkup\");\r\nconst htmlCache_1 = require(\"./htmlCache\");\r\nconst htmlHeightWidth_1 = require(\"./htmlHeightWidth\");\r\nconst viewSlots_1 = require(\"./viewSlots\");\r\nconst columnBindingContext_1 = require(\"./columnBindingContext\");\r\nconst rowDataBinder_1 = require(\"./rowDataBinder\");\r\nconst rowClickHandler_1 = require(\"./rowClickHandler\");\r\nconst groupingElements_1 = require(\"./groupingElements\");\r\nconst controller_1 = require(\"./controller\");\r\nconst loadingScreen_1 = require(\"./loadingScreen\");\r\nconst contextMenu_1 = require(\"./contextMenu\");\r\nconst footer_1 = require(\"./footer\");\r\nconst interfaces_1 = require(\"../interfaces\");\r\nlet VGrid = class VGrid {\r\n    constructor(element, viewCompiler, container, viewResources, taskQueue) {\r\n        this.element = element;\r\n        this.viewCompiler = viewCompiler;\r\n        this.container = container;\r\n        this.viewResources = viewResources;\r\n        this.taskQueue = taskQueue;\r\n        this.dragDropAttributeSharedContext = {};\r\n        this.resizeAttributeSharedContext = {};\r\n        this.copyPasteValueSharedContext = null;\r\n        this.colConfig = [];\r\n        this.backupColConfig = [];\r\n        this.colRepeater = false;\r\n        this.colRepeatRowTemplate = null;\r\n        this.colRepeatRowHeaderTemplate = null;\r\n        this.colGroupRow = null;\r\n        this.colGroupElement = null;\r\n        this.customMenuTemplates = {};\r\n        this.footerTemplate = null;\r\n        this.loadingScreenTemplate = null;\r\n        this.newGrid = true;\r\n        this.controller = new controller_1.Controller(this);\r\n        this.htmlCache = new htmlCache_1.HtmlCache(element);\r\n        this.htmlHeightWidth = new htmlHeightWidth_1.HtmlHeightWidth(this.controller);\r\n        this.viewSlots = new viewSlots_1.ViewSlots(this.htmlCache);\r\n        this.columnBindingContext = new columnBindingContext_1.ColumnBindingContext(this.controller);\r\n        this.rowDataBinder = new rowDataBinder_1.RowDataBinder(element, this.controller);\r\n        this.mainMarkup = new mainMarkup_1.MainMarkup(element, viewCompiler, container, viewResources, this.htmlHeightWidth, this.viewSlots);\r\n        this.mainScrollEvents = new mainScrollEvents_1.MainScrollEvents(element, this.htmlCache, this.controller);\r\n        this.rowMarkup = new rowMarkup_1.RowMarkup(element, this.htmlCache);\r\n        this.rowScrollEvents = new rowScrollEvents_1.RowScrollEvents(element, this.htmlCache, this.controller);\r\n        this.rowClickHandler = new rowClickHandler_1.RowClickHandler(element, this.htmlCache);\r\n        this.columnMarkup = new columnMarkup_1.ColumnMarkup(element, viewCompiler, container, viewResources, this.htmlCache, this.viewSlots, this.columnBindingContext);\r\n        this.groupingElements = new groupingElements_1.GroupingElements(element, viewCompiler, container, viewResources, this.htmlCache, this.viewSlots, this.columnBindingContext);\r\n        this.loadingScreen = new loadingScreen_1.LoadingScreen(element, viewCompiler, container, viewResources, this.viewSlots);\r\n        this.contextMenu = new contextMenu_1.ContextMenu(viewCompiler, container, viewResources, this.viewSlots, this.controller);\r\n        this.footer = new footer_1.Footer(this.htmlCache, viewCompiler, container, viewResources, this.viewSlots);\r\n        this.filterOperatorNames = {\r\n            '=': 'equals',\r\n            '<=': 'less than or eq',\r\n            '>=': 'greater than or eq',\r\n            '<': 'less than',\r\n            '>': 'greater than',\r\n            '*': 'contains',\r\n            '!=': 'not equal to',\r\n            '!*': 'does not contain',\r\n            '*=': 'begins with',\r\n            '=*': 'ends with'\r\n        };\r\n        this.filterOperatorTranslationKeys = {\r\n            equals: '=',\r\n            lessThanOrEqual: '<=',\r\n            greaterThanOrEqual: '>=',\r\n            lessThan: '<',\r\n            greaterThan: '>',\r\n            contains: '*',\r\n            notEqualTo: '!=',\r\n            doesNotContain: '!*',\r\n            beginsWith: '*=',\r\n            endsWith: '=*'\r\n        };\r\n    }\r\n    bind(bindingContext, overrideContext) {\r\n        this.bindingContext = bindingContext;\r\n        this.overrideContext = overrideContext;\r\n        this.attRowHeight = this.attRowHeight ? this.attRowHeight * 1 : 25;\r\n        this.attHeaderHeight = this.attHeaderHeight ? this.attHeaderHeight * 1 : 25;\r\n        this.attFooterHeight = this.attFooterHeight ? this.attFooterHeight * 1 : 25;\r\n        this.attPanelHeight = this.attPanelHeight ? this.attPanelHeight * 1 : 25;\r\n        this.attDataDelay = this.attDataDelay ? this.attDataDelay * 1 : 0;\r\n        this.attMultiSelect = this.checkBool(this.attMultiSelect);\r\n        this.attManualSelection = this.attManualSelection ? this.checkBool(this.attManualSelection) : null;\r\n        this.attVariableRowHeight = this.attVariableRowHeight ? this.checkBool(this.attVariableRowHeight) : null;\r\n        this.attSkipPassive = this.attSkipPassive ? this.checkBool(this.attSkipPassive) : null;\r\n        this.attTheme = this.attTheme || 'avg-default';\r\n        this.element.classList.add(this.attTheme);\r\n        this.attOnRowDraw = typeof this.attOnRowDraw === 'function' ? this.attOnRowDraw : null;\r\n        this.attI18N = typeof this.attI18N === 'function' ? this.attI18N : null;\r\n    }\r\n    unbind() {\r\n        this.newGrid = false;\r\n        this.viewSlots.unbindAndDetachColumns();\r\n    }\r\n    attached() {\r\n        this.attGridConnector.connect(this.controller, () => {\r\n            if (this.newGrid) {\r\n                this.backupColConfig = this.colConfig.slice(0);\r\n                if (this.attColConfig) {\r\n                    this.colConfig = this.attColConfig.length > 0 ? this.attColConfig : this.colConfig;\r\n                }\r\n                this.controller.getContext();\r\n                this.controller.createGrid();\r\n                this.viewSlots.bindAndAttachColumns(this.overrideContext, this.columnBindingContext, this.attGridConnector.getSelection());\r\n                setTimeout(() => {\r\n                    this.controller.udateHorizontalScroller();\r\n                }, 50);\r\n            }\r\n            else {\r\n                this.controller.setColumnConfig(this.controller.getColumnConfig());\r\n            }\r\n            this.attGridConnector.gridCreated();\r\n        });\r\n    }\r\n    checkBool(value) {\r\n        if (typeof value === 'string') {\r\n            value = value.toLowerCase();\r\n        }\r\n        switch (true) {\r\n            case value === 'true':\r\n            case value === true:\r\n                value = true;\r\n                break;\r\n            case value === 'false':\r\n            case value === false:\r\n                value = false;\r\n                break;\r\n            default:\r\n                value = false;\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n};\r\nVGrid.inject = [Element, aurelia_framework_1.ViewCompiler, aurelia_framework_1.Container, aurelia_framework_1.ViewResources, aurelia_framework_1.TaskQueue];\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-row-height' }),\r\n    __metadata(\"design:type\", Number)\r\n], VGrid.prototype, \"attRowHeight\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-skip-passive' }),\r\n    __metadata(\"design:type\", Boolean)\r\n], VGrid.prototype, \"attSkipPassive\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-header-height' }),\r\n    __metadata(\"design:type\", Number)\r\n], VGrid.prototype, \"attHeaderHeight\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-footer-height' }),\r\n    __metadata(\"design:type\", Number)\r\n], VGrid.prototype, \"attFooterHeight\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-panel-height' }),\r\n    __metadata(\"design:type\", Number)\r\n], VGrid.prototype, \"attPanelHeight\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-grid-connector' }),\r\n    __metadata(\"design:type\", typeof (_a = typeof interfaces_1.GridConnectorInterface !== \"undefined\" && interfaces_1.GridConnectorInterface) === \"function\" ? _a : Object)\r\n], VGrid.prototype, \"attGridConnector\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-multi-select' }),\r\n    __metadata(\"design:type\", Boolean)\r\n], VGrid.prototype, \"attMultiSelect\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-manual-sel' }),\r\n    __metadata(\"design:type\", Boolean)\r\n], VGrid.prototype, \"attManualSelection\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-theme' }),\r\n    __metadata(\"design:type\", String)\r\n], VGrid.prototype, \"attTheme\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-row-on-draw' }),\r\n    __metadata(\"design:type\", typeof (_b = typeof Function !== \"undefined\" && Function) === \"function\" ? _b : Object)\r\n], VGrid.prototype, \"attOnRowDraw\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-columns' }),\r\n    __metadata(\"design:type\", Array)\r\n], VGrid.prototype, \"attColConfig\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-i18n' }),\r\n    __metadata(\"design:type\", typeof (_c = typeof Function !== \"undefined\" && Function) === \"function\" ? _c : Object)\r\n], VGrid.prototype, \"attI18N\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-data-delay' }),\r\n    __metadata(\"design:type\", Number)\r\n], VGrid.prototype, \"attDataDelay\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable({ attribute: 'v-variable-row-height' }),\r\n    __metadata(\"design:type\", Boolean)\r\n], VGrid.prototype, \"attVariableRowHeight\", void 0);\r\nVGrid = __decorate([\r\n    aurelia_framework_1.customElement('v-grid'),\r\n    __metadata(\"design:paramtypes\", [typeof (_d = typeof Element !== \"undefined\" && Element) === \"function\" ? _d : Object, typeof (_e = typeof aurelia_framework_1.ViewCompiler !== \"undefined\" && aurelia_framework_1.ViewCompiler) === \"function\" ? _e : Object, typeof (_f = typeof aurelia_framework_1.Container !== \"undefined\" && aurelia_framework_1.Container) === \"function\" ? _f : Object, typeof (_g = typeof aurelia_framework_1.ViewResources !== \"undefined\" && aurelia_framework_1.ViewResources) === \"function\" ? _g : Object, typeof (_h = typeof aurelia_framework_1.TaskQueue !== \"undefined\" && aurelia_framework_1.TaskQueue) === \"function\" ? _h : Object])\r\n], VGrid);\r\nexports.VGrid = VGrid;\r\n//# sourceMappingURL=v-grid.js.map",
dependencies: ["aurelia-framework","./mainMarkup","./mainScrollEvents","./rowMarkup","./rowScrollEvents","./columnMarkup","./htmlCache","./htmlHeightWidth","./viewSlots","./columnBindingContext","./rowDataBinder","./rowClickHandler","./groupingElements","./controller","./loadingScreen","./contextMenu","./footer","../interfaces"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860165,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
