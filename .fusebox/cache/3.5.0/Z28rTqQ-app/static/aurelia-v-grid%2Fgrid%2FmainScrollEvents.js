module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass MainScrollEvents {\r\n    constructor(element, htmlCache, controller) {\r\n        this.element = element;\r\n        this.htmlCache = htmlCache;\r\n        this.timerLeft = null;\r\n        this.timerMain = null;\r\n        this.timerRight = null;\r\n        this.timerVhandle = null;\r\n        this.timerHhandle = null;\r\n        this.timerWheel = null;\r\n        this.isScrollbar = false;\r\n        this.lastTopPosition = 0;\r\n        this.wheelEvent = 'wheel';\r\n        this.onWeelBinded = this.onWeel.bind(this);\r\n        this.handleEventVhandleBinded = this.handleEventVhandle.bind(this);\r\n        this.handleEventHhandleBinded = this.handleEventHhandle.bind(this);\r\n        this.touchMoveBinded = this.touchMove.bind(this);\r\n        this.touchStartBinded = this.touchStart.bind(this);\r\n        this.controller = controller;\r\n        this.isIE11 = !!window.MSInputMethodContext && !!document.documentMode;\r\n        if (this.isIE11) {\r\n            this.wheelEvent = 'mousewheel';\r\n            console.warn('IE11, why!?!?!');\r\n        }\r\n        this.passiveSupported = false;\r\n    }\r\n    init() {\r\n        this.updateInternalHtmlCache();\r\n        try {\r\n            let options = Object.defineProperty({}, 'passive', {\r\n                get: () => {\r\n                    this.passiveSupported = this.controller.attSkipPassive ? false : true;\r\n                }\r\n            });\r\n            window.addEventListener('testavg', null, options);\r\n        }\r\n        catch (err) { }\r\n        this.addScrollEvents('all');\r\n    }\r\n    updateInternalHtmlCache() {\r\n        this.left = this.htmlCache.avg_content_left;\r\n        this.main = this.htmlCache.avg_content_main;\r\n        this.right = this.htmlCache.avg_content_right;\r\n        this.mainHead = this.htmlCache.avg_header_main_scroll;\r\n        this.vhandle = this.htmlCache.avg_content_vhandle;\r\n        this.hhandle = this.htmlCache.avg_content_hhandle;\r\n        this.group = this.htmlCache.avg_content_group;\r\n    }\r\n    onWeel(event) {\r\n        if (this.controller.attSkipPassive) {\r\n            event.preventDefault();\r\n        }\r\n        if (this.vhandle.scrollHeight === this.vhandle.parentNode.clientHeight) {\r\n            return false;\r\n        }\r\n        requestAnimationFrame(() => {\r\n            let deltaY = event.deltaY;\r\n            if (event.deltaMode) {\r\n                deltaY = deltaY * 40;\r\n            }\r\n            if (!event.deltaY && !event.deltaMode) {\r\n                if (event.wheelDelta < 0) {\r\n                    deltaY = 100;\r\n                }\r\n                else {\r\n                    deltaY = -100;\r\n                }\r\n            }\r\n            this.handleEventWheelScroll(deltaY);\r\n        });\r\n        return false;\r\n    }\r\n    addScrollEvents(type) {\r\n        let options = this.passiveSupported ? { passive: true } : false;\r\n        switch (type) {\r\n            case 'all':\r\n                this.right.addEventListener(this.wheelEvent, this.onWeelBinded, options);\r\n                this.main.addEventListener(this.wheelEvent, this.onWeelBinded, options);\r\n                this.left.addEventListener(this.wheelEvent, this.onWeelBinded, options);\r\n                this.group.addEventListener(this.wheelEvent, this.onWeelBinded, options);\r\n                this.vhandle.addEventListener('scroll', this.handleEventVhandleBinded, options);\r\n                this.hhandle.addEventListener('scroll', this.handleEventHhandleBinded, options);\r\n                this.htmlCache.element.addEventListener('touchmove', this.touchMoveBinded, options);\r\n                this.htmlCache.element.addEventListener('touchstart', this.touchStartBinded, options);\r\n                break;\r\n            case 'wheel':\r\n                this.vhandle.addEventListener('scroll', this.handleEventVhandleBinded, options);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n    removeScrollEvents(type) {\r\n        switch (type) {\r\n            case 'all':\r\n                this.vhandle.removeEventListener('onscroll', this.handleEventVhandleBinded);\r\n                break;\r\n            case 'wheel':\r\n                this.vhandle.removeEventListener('onscroll', this.handleEventVhandleBinded);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n    touchStart(e) {\r\n        let touchobj = e.changedTouches[0];\r\n        this.touchY = parseInt(touchobj.clientY, 10);\r\n        this.touchX = parseInt(touchobj.clientX, 10);\r\n    }\r\n    touchMove(e) {\r\n        if (this.controller.attSkipPassive) {\r\n            event.preventDefault();\r\n        }\r\n        let touchobj = e.changedTouches[0];\r\n        let dist = this.touchY - parseInt(touchobj.clientY, 10);\r\n        let distX = parseInt(touchobj.clientX, 10) - this.touchX;\r\n        this.touchY = parseInt(touchobj.clientY, 10);\r\n        this.touchX = parseInt(touchobj.clientX, 10);\r\n        this.handleEventWheelScroll(dist, -distX);\r\n    }\r\n    handleEventWheelScroll(newTopPosition, left) {\r\n        requestAnimationFrame(() => {\r\n            if (this.timerWheel) {\r\n                clearTimeout(this.timerWheel);\r\n                this.removeScrollEvents('wheel');\r\n            }\r\n            requestAnimationFrame(() => {\r\n                this.vhandle.scrollTop = this.vhandle.scrollTop + newTopPosition;\r\n                this.main.scrollTop = this.vhandle.scrollTop;\r\n                this.right.scrollTop = this.vhandle.scrollTop;\r\n                this.left.scrollTop = this.vhandle.scrollTop;\r\n                this.group.scrollTop = this.vhandle.scrollTop;\r\n                if (left !== undefined) {\r\n                    this.main.scrollLeft = this.main.scrollLeft + left;\r\n                    this.mainHead.style.left = -this.main.scrollLeft + 'px';\r\n                }\r\n                this.isScrollbar = false;\r\n                this.checkScroll(this.main.scrollTop);\r\n                this.timerWheel = setTimeout(() => {\r\n                    this.addScrollEvents('wheel');\r\n                    this.timerWheel = null;\r\n                }, 30);\r\n            });\r\n        });\r\n    }\r\n    handleEventVhandle() {\r\n        requestAnimationFrame(() => {\r\n            if (this.timerVhandle) {\r\n                clearTimeout(this.timerVhandle);\r\n                this.removeScrollEvents('Vhandle');\r\n            }\r\n            requestAnimationFrame(() => {\r\n                let newTopPosition = this.vhandle.scrollTop;\r\n                this.right.scrollTop = newTopPosition;\r\n                this.main.scrollTop = newTopPosition;\r\n                this.left.scrollTop = newTopPosition;\r\n                this.group.scrollTop = newTopPosition;\r\n                this.isScrollbar = true;\r\n                this.checkScroll(newTopPosition);\r\n                this.timerVhandle = setTimeout(() => {\r\n                    this.addScrollEvents('Vhandle');\r\n                    this.timerVhandle = null;\r\n                }, 30);\r\n            });\r\n        });\r\n    }\r\n    handleEventHhandle() {\r\n        requestAnimationFrame(() => {\r\n            if (this.timerHhandle) {\r\n                clearTimeout(this.timerHhandle);\r\n                this.removeScrollEvents('Hhandle');\r\n            }\r\n            requestAnimationFrame(() => {\r\n                let newLeftPosition = this.hhandle.scrollLeft;\r\n                this.main.scrollLeft = newLeftPosition;\r\n                this.mainHead.style.left = -newLeftPosition + 'px';\r\n                this.timerHhandle = setTimeout(() => {\r\n                    this.addScrollEvents('Hhandle');\r\n                    this.timerHhandle = null;\r\n                }, 30);\r\n            });\r\n        });\r\n    }\r\n    checkScroll(newTopPosition) {\r\n        if (this.lastTopPosition !== newTopPosition) {\r\n            let isDown = true;\r\n            if (this.lastTopPosition > newTopPosition) {\r\n                isDown = false;\r\n            }\r\n            this.lastTopPosition = newTopPosition;\r\n            this.triggerGridScrollEvent(this.isScrollbar, isDown, newTopPosition);\r\n        }\r\n    }\r\n    triggerGridScrollEvent(scrollbarScrolling, down, topPosition) {\r\n        let event = new CustomEvent('avg-scroll', {\r\n            detail: {\r\n                isScrollBarScrolling: scrollbarScrolling,\r\n                isDown: down,\r\n                newTopPosition: topPosition\r\n            },\r\n            bubbles: false\r\n        });\r\n        this.element.dispatchEvent(event);\r\n    }\r\n}\r\nexports.MainScrollEvents = MainScrollEvents;\r\n//# sourceMappingURL=mainScrollEvents.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860157,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
