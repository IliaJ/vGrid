module.exports = { contents: "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _a, _b;\r\nconst aurelia_framework_1 = require(\"aurelia-framework\");\r\nconst v_grid_1 = require(\"../v-grid\");\r\nlet VGridDragDropCol = class VGridDragDropCol {\r\n    constructor(element, vGrid) {\r\n        this.vGrid = vGrid;\r\n        this.vGridElement = vGrid.element;\r\n        this.controller = vGrid.controller;\r\n        this.groupingElements = vGrid.groupingElements;\r\n        this.htmlHeightWidth = vGrid.htmlHeightWidth;\r\n        this.sharedContext = vGrid.dragDropAttributeSharedContext;\r\n        this.element = element;\r\n        this.column = this.element;\r\n        this.entered = null;\r\n        this.curColNo = null;\r\n    }\r\n    bind(bindingContext, overrideContext) {\r\n        this.bindingContext = bindingContext;\r\n        this.overrideContext = overrideContext;\r\n        this.onDragstartBinded = this.onDragstart.bind(this);\r\n        this.onDragenterBinded = this.onDragenter.bind(this);\r\n        this.onDragoverBinded = this.onDragover.bind(this);\r\n        this.onDragendBinded = this.onDragend.bind(this);\r\n        this.onDragOutSideBinded = this.onDragOutSide.bind(this);\r\n        this.onCloseMenuBinded = this.onCloseMenu.bind(this);\r\n    }\r\n    unbind() {\r\n    }\r\n    detached() {\r\n        let result = this.getTargetData(this.column);\r\n        if (result.ok && !result.panel) {\r\n            this.element.removeEventListener('mousedown', this.onDragstartBinded);\r\n            result.target.removeEventListener('mouseenter', this.onDragenterBinded);\r\n        }\r\n        if (result.ok && result.target.nodeName === 'AVG-DRAG-HELPER') {\r\n            this.element.removeEventListener('mousedown', this.onDragstartBinded);\r\n            result.target.removeEventListener('mouseenter', this.onDragenterBinded);\r\n            result.target.removeEventListener('mousedown', this.onCloseMenuBinded);\r\n        }\r\n    }\r\n    attached() {\r\n        let result = this.getTargetData(this.column);\r\n        if (result.ok && !result.panel) {\r\n            this.column = result.target;\r\n            this.colType = this.column.attributes.getNamedItem('data-avg-type').value;\r\n            this.colNo = parseInt(this.column.attributes.getNamedItem('data-avg-config-col').value, 10);\r\n            this.context = this.vGrid.columnBindingContext['setup' + this.colType][this.colNo];\r\n            this.columnsArray = this.vGrid.columnBindingContext['setup' + this.colType];\r\n            this.element.addEventListener('mousedown', this.onDragstartBinded);\r\n            result.target.addEventListener('mouseenter', this.onDragenterBinded);\r\n        }\r\n        if (result.ok && result.target.nodeName === 'AVG-TOP-PANEL') {\r\n            this.isPanel = true;\r\n            this.sharedContext.panel = result.target;\r\n            result.target.onmouseleave = () => {\r\n                if (this.sharedContext.dragging && this.sharedContext.title && this.sharedContext.field) {\r\n                    this.groupingElements.removeGroup('');\r\n                }\r\n            };\r\n            result.target.onmouseenter = () => {\r\n                if (this.sharedContext.dragging && this.sharedContext.title && this.sharedContext.field) {\r\n                    this.groupingElements.addGroup(this.sharedContext.title, this.sharedContext.field);\r\n                    this.sharedContext.lastTarget = result.target;\r\n                }\r\n            };\r\n            result.target.onmouseup = () => {\r\n                if (this.sharedContext.dragging && this.sharedContext.title && this.sharedContext.field) {\r\n                    this.groupingElements.addToGrouping();\r\n                }\r\n            };\r\n        }\r\n        if (result.ok && result.target.nodeName === 'AVG-DRAG-HELPER') {\r\n            this.column = result.target;\r\n            this.colType = this.column.attributes.getNamedItem('data-avg-type').value;\r\n            this.colNo = parseInt(this.column.attributes.getNamedItem('data-avg-config-col').value, 10);\r\n            this.context = this.vGrid.columnBindingContext['setup' + 'main'][this.colNo];\r\n            this.columnsArray = this.vGrid.columnBindingContext['setup' + 'main'];\r\n            this.isPanel = true;\r\n            this.element.addEventListener('mousedown', this.onDragstartBinded);\r\n            result.target.addEventListener('mouseenter', this.onDragenterBinded);\r\n            result.target.addEventListener('mousedown', this.onCloseMenuBinded);\r\n        }\r\n    }\r\n    onCloseMenu() {\r\n        this.vGrid.controller.raiseEvent('avg-close-menu');\r\n    }\r\n    createDragElement(event) {\r\n        this.dragColumnBlock = document.createElement('div');\r\n        this.dragColumnBlock.classList.add(this.vGrid.attTheme);\r\n        this.dragColumnBlock.classList.add('avg-drag');\r\n        this.dragColumnBlock.style.top = this.isPanel ? event.clientY + 'px' : -1200 + 'px';\r\n        this.dragColumnBlock.style.left = this.isPanel ? event.clientX + 'px' : -1200 + 'px';\r\n        document.body.appendChild(this.dragColumnBlock);\r\n        this.dragColumnBlock.innerHTML = this.title || this.vGrid.colConfig[this.colNo].colHeaderName;\r\n    }\r\n    onDragstart(event) {\r\n        document.addEventListener('mouseup', this.onDragendBinded);\r\n        this.vGridElement.addEventListener('mouseleave', this.onDragOutSideBinded);\r\n        this.createDragElement(event);\r\n        if (this.isPanel) {\r\n            document.addEventListener('mousemove', this.onDragoverBinded, false);\r\n        }\r\n        else {\r\n            this.mouseMoveTimer = setTimeout(() => {\r\n                document.addEventListener('mousemove', this.onDragoverBinded, false);\r\n            }, 300);\r\n        }\r\n        this.sharedContext.dragging = true;\r\n        this.sharedContext.colType = this.colType;\r\n        this.sharedContext.context = this.context;\r\n        this.sharedContext.colNo = this.colNo;\r\n        this.sharedContext.curColNo = this.colNo;\r\n        this.sharedContext.columnsArray = this.columnsArray;\r\n        this.sharedContext.title = this.title;\r\n        this.sharedContext.field = this.field;\r\n        this.sharedContext.columnsArraySorted = [];\r\n        this.sharedContext.columnsArray.forEach((x) => {\r\n            this.sharedContext.columnsArraySorted.push(x);\r\n        });\r\n    }\r\n    onDragOutSide(event) {\r\n        if (this.sharedContext.dragging) {\r\n            if (event.layerX < 0) {\r\n                let left = false;\r\n                this.vGrid.columnBindingContext.setupleft.forEach((x) => {\r\n                    if (x.show) {\r\n                        left = true;\r\n                    }\r\n                });\r\n                if (!left) {\r\n                    this.switchColumns({\r\n                        colType: 'left'\r\n                    });\r\n                }\r\n            }\r\n            if (event.layerX > this.vGridElement.clientWidth) {\r\n                let right = false;\r\n                this.vGrid.columnBindingContext.setupright.forEach((x) => {\r\n                    if (x.show) {\r\n                        right = true;\r\n                    }\r\n                });\r\n                if (!right) {\r\n                    this.switchColumns({\r\n                        colType: 'right'\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onDragenter(event) {\r\n        if (this.sharedContext.dragging) {\r\n            let result = this.getTargetData(event.target);\r\n            if (result.target.nodeName === 'AVG-COL' && result.ok && this.sharedContext.lastTarget !== result.target) {\r\n                this.sharedContext.lastTarget = result.target;\r\n                if (result.colNo !== this.sharedContext.colNo && result.colType === this.sharedContext.colType) {\r\n                    let newLeft = this.sharedContext.columnsArray[result.colNo].left;\r\n                    let oldLeft = this.sharedContext.columnsArray[this.sharedContext.colNo].left;\r\n                    if (newLeft < oldLeft) {\r\n                        this.sharedContext.columnsArray[this.sharedContext.colNo].left = newLeft;\r\n                        this.sharedContext.columnsArray[result.colNo].left = newLeft + 1;\r\n                    }\r\n                    else {\r\n                        this.sharedContext.columnsArray[this.sharedContext.colNo].left = newLeft;\r\n                        this.sharedContext.columnsArray[result.colNo].left = newLeft - 1;\r\n                    }\r\n                    this.sharedContext.columnsArraySorted.sort((a, b) => {\r\n                        return a.left - b.left;\r\n                    });\r\n                    let appendValue = 0;\r\n                    this.sharedContext.columnsArraySorted.forEach((x) => {\r\n                        if (x.show) {\r\n                            x.left = appendValue;\r\n                            appendValue = appendValue + x.width;\r\n                        }\r\n                    });\r\n                }\r\n                if (result.colNo !== this.sharedContext.colNo && result.colType !== this.sharedContext.colType) {\r\n                    this.switchColumns(result);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onDragover(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (this.dragColumnBlock) {\r\n            this.dragColumnBlock.style.top = event.clientY + 'px';\r\n            this.dragColumnBlock.style.left = event.clientX + 'px';\r\n        }\r\n    }\r\n    onDragend() {\r\n        clearTimeout(this.mouseMoveTimer);\r\n        this.sharedContext.dragging = false;\r\n        document.removeEventListener('mouseup', this.onDragendBinded);\r\n        document.removeEventListener('mousemove', this.onDragoverBinded);\r\n        this.vGridElement.removeEventListener('mouseleave', this.onDragOutSideBinded);\r\n        this.sharedContext.lastTarget = null;\r\n        if (this.dragColumnBlock) {\r\n            let parent = this.dragColumnBlock.parentNode;\r\n            if (parent) {\r\n                parent.removeChild(this.dragColumnBlock);\r\n                this.dragColumnBlock = null;\r\n            }\r\n        }\r\n    }\r\n    switchColumns(result) {\r\n        let width;\r\n        let newColType = result.colType;\r\n        let oldColType = this.sharedContext.colType;\r\n        let moreThenOneMainColumn = true;\r\n        switch (true) {\r\n            case newColType === 'left' && oldColType === 'main':\r\n            case newColType === 'right' && oldColType === 'main':\r\n            case newColType === 'main' && oldColType === 'left':\r\n            case newColType === 'main' && oldColType === 'right':\r\n            case newColType === 'left' && oldColType === 'right':\r\n            case newColType === 'right' && oldColType === 'left':\r\n            case newColType === 'main' && oldColType === 'chooser':\r\n            case newColType === 'left' && oldColType === 'chooser':\r\n            case newColType === 'right' && oldColType === 'chooser':\r\n                if (oldColType === 'main') {\r\n                    let count = -1;\r\n                    this.sharedContext.columnsArray.forEach((x) => {\r\n                        if (x.show) {\r\n                            count++;\r\n                        }\r\n                    });\r\n                    if (!count) {\r\n                        moreThenOneMainColumn = false;\r\n                    }\r\n                }\r\n                if (moreThenOneMainColumn) {\r\n                    this.sharedContext.columnsArray[this.sharedContext.colNo].show = false;\r\n                    width = this.sharedContext.columnsArray[this.sharedContext.colNo].width;\r\n                    this.sharedContext.columnsArraySorted.sort((a, b) => {\r\n                        return a.left - b.left;\r\n                    });\r\n                    let appendValue = 0;\r\n                    this.sharedContext.columnsArraySorted.forEach((x) => {\r\n                        if (x.show) {\r\n                            x.left = appendValue;\r\n                            appendValue = appendValue + x.width;\r\n                        }\r\n                    });\r\n                    this.sharedContext.colType = result.colType;\r\n                    this.sharedContext.columnsArray = this.vGrid.columnBindingContext['setup' + result.colType];\r\n                    this.sharedContext.columnsArray[this.sharedContext.colNo].show = true;\r\n                    this.sharedContext.columnsArray[this.sharedContext.colNo].width = width;\r\n                    this.sharedContext.columnsArraySorted = [];\r\n                    this.sharedContext.columnsArray.forEach((x) => {\r\n                        this.sharedContext.columnsArraySorted.push(x);\r\n                    });\r\n                    this.sharedContext.columnsArraySorted.sort((a, b) => {\r\n                        return a.left - b.left;\r\n                    });\r\n                    appendValue = 0;\r\n                    this.sharedContext.columnsArraySorted.forEach((x) => {\r\n                        if (x.show) {\r\n                            x.left = appendValue;\r\n                            appendValue = appendValue + x.width;\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (newColType === 'left' && oldColType === 'main' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.moveWidthFromMainToLeft(width);\r\n        }\r\n        if (newColType === 'main' && oldColType === 'chooser' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.addWidthToMain(width);\r\n        }\r\n        if (newColType === 'left' && oldColType === 'chooser' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.addWidthToLeft(width);\r\n        }\r\n        if (newColType === 'right' && oldColType === 'chooser' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.addWidthToRight(width);\r\n        }\r\n        if (newColType === 'main' && oldColType === 'left' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.moveWidthFromLeftToMain(width);\r\n        }\r\n        if (newColType === 'right' && oldColType === 'main' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.moveWidthFromMainToRight(width);\r\n        }\r\n        if (newColType === 'main' && oldColType === 'right' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.moveWidthFromRightToMain(width);\r\n        }\r\n        if (newColType === 'left' && oldColType === 'right' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.moveWidthFromLeftToRight(width);\r\n        }\r\n        if (newColType === 'right' && oldColType === 'left' && moreThenOneMainColumn) {\r\n            this.htmlHeightWidth.moveWidthFromRightToLeft(width);\r\n        }\r\n    }\r\n    getTargetData(curTarget) {\r\n        let draggableTarget = null;\r\n        let count = 0;\r\n        let exit = true;\r\n        let isOk = false;\r\n        while (exit) {\r\n            count++;\r\n            if (!curTarget.parentNode) {\r\n                exit = false;\r\n            }\r\n            else {\r\n                if (curTarget.draggable === true && draggableTarget === null) {\r\n                    draggableTarget = curTarget;\r\n                }\r\n                switch (true) {\r\n                    case curTarget.nodeName === 'AVG-DRAG-HELPER':\r\n                    case curTarget.nodeName === 'AVG-COL':\r\n                    case curTarget.nodeName === 'AVG-TOP-PANEL':\r\n                        isOk = true;\r\n                        exit = false;\r\n                        break;\r\n                    default:\r\n                        curTarget = curTarget.parentNode;\r\n                        break;\r\n                }\r\n            }\r\n            if (count > 10) {\r\n                exit = false;\r\n            }\r\n        }\r\n        let curColType = null;\r\n        let curColNo = null;\r\n        let curContext = null;\r\n        let curColumnsArray = null;\r\n        let isPanel = false;\r\n        if (isOk && curTarget.nodeName === 'AVG-COL') {\r\n            curColType = curTarget.attributes.getNamedItem('data-avg-type').value;\r\n            curColNo = parseInt(curTarget.attributes.getNamedItem('data-avg-config-col').value, 10);\r\n            curContext = this.vGrid.columnBindingContext['setup' + curColType][curColNo];\r\n            curColumnsArray = this.vGrid.columnBindingContext['setup' + curColType];\r\n        }\r\n        if (isOk && curTarget.nodeName === 'AVG-DRAG-HELPER') {\r\n            curColType = curTarget.attributes.getNamedItem('data-avg-type').value;\r\n            curColNo = parseInt(curTarget.attributes.getNamedItem('data-avg-config-col').value, 10);\r\n            curContext = this.vGrid.columnBindingContext['setup' + 'main'][curColNo];\r\n            curColumnsArray = this.vGrid.columnBindingContext['setup' + 'main'];\r\n            isPanel = true;\r\n        }\r\n        if (isOk && curTarget.nodeName === 'AVG-TOP-PANEL') {\r\n            isPanel = true;\r\n        }\r\n        return {\r\n            draggable: draggableTarget,\r\n            ok: isOk,\r\n            target: curTarget,\r\n            colType: curColType,\r\n            colNo: curColNo,\r\n            context: curContext,\r\n            columnsArray: curColumnsArray,\r\n            panel: isPanel\r\n        };\r\n    }\r\n};\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridDragDropCol.prototype, \"title\", void 0);\r\n__decorate([\r\n    aurelia_framework_1.bindable,\r\n    __metadata(\"design:type\", String)\r\n], VGridDragDropCol.prototype, \"field\", void 0);\r\nVGridDragDropCol = __decorate([\r\n    aurelia_framework_1.customAttribute('v-drag-drop-col'),\r\n    aurelia_framework_1.inject(Element, v_grid_1.VGrid),\r\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof Element !== \"undefined\" && Element) === \"function\" ? _a : Object, typeof (_b = typeof v_grid_1.VGrid !== \"undefined\" && v_grid_1.VGrid) === \"function\" ? _b : Object])\r\n], VGridDragDropCol);\r\nexports.VGridDragDropCol = VGridDragDropCol;\r\n//# sourceMappingURL=v-drag-drop-col.js.map",
dependencies: ["aurelia-framework","../v-grid"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860149,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
