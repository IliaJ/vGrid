module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass RowDataBinder {\r\n    constructor(element, controller) {\r\n        this.element = element;\r\n        this.controller = controller;\r\n    }\r\n    init() {\r\n        this.addEventListener();\r\n    }\r\n    rebindRowNo(row) {\r\n        let rowCache = this.controller.htmlCache.rowCache;\r\n        let foundRowCache = null;\r\n        rowCache.forEach((cache) => {\r\n            if (cache.row === row) {\r\n                foundRowCache = cache;\r\n            }\r\n        });\r\n        if (foundRowCache) {\r\n            this.rebindRow({\r\n                detail: {\r\n                    currentRow: row,\r\n                    rowCache: foundRowCache,\r\n                    downScroll: true\r\n                }\r\n            });\r\n        }\r\n    }\r\n    addEventListener() {\r\n        this.rebindRowBinded = this.rebindRow.bind(this);\r\n        this.rebindAllRowsBinded = this.rebindAllRows.bind(this);\r\n        this.element.addEventListener('avg-rebind-row', this.rebindRowBinded);\r\n        this.element.addEventListener('avg-rebind-all-rows', this.rebindAllRowsBinded);\r\n    }\r\n    rebindRow(event) {\r\n        let currentRow = event.detail.currentRow;\r\n        let rowCache = event.detail.rowCache;\r\n        let downScroll = event.detail.downScroll;\r\n        let bindingContext = rowCache.bindingContext;\r\n        this.controller.getElement(currentRow, downScroll, (data) => {\r\n            if (data.rowRef) {\r\n                if (data.rowRef.__group) {\r\n                    rowCache.isGroup = true;\r\n                }\r\n                else {\r\n                    rowCache.isGroup = false;\r\n                }\r\n            }\r\n            let isSelected = data.selection.isSelected(rowCache.row);\r\n            if (isSelected) {\r\n                if (!rowCache.selected) {\r\n                    rowCache.selected = true;\r\n                    rowCache.left.classList.add('avg-selected-row');\r\n                    rowCache.main.classList.add('avg-selected-row');\r\n                    rowCache.right.classList.add('avg-selected-row');\r\n                }\r\n            }\r\n            else {\r\n                if (rowCache.selected) {\r\n                    rowCache.selected = false;\r\n                    rowCache.left.classList.remove('avg-selected-row');\r\n                    rowCache.main.classList.remove('avg-selected-row');\r\n                    rowCache.right.classList.remove('avg-selected-row');\r\n                }\r\n            }\r\n            if (data.rowRef === undefined || data.rowRef === null) {\r\n                rowCache.left.style.display = 'none';\r\n                rowCache.main.style.display = 'none';\r\n                rowCache.right.style.display = 'none';\r\n                rowCache.group.style.display = 'none';\r\n            }\r\n            else {\r\n                rowCache.left.style.display = 'block';\r\n                rowCache.main.style.display = 'block';\r\n                rowCache.right.style.display = 'block';\r\n                rowCache.group.style.display = 'block';\r\n            }\r\n            bindingContext.rowRef = data.rowRef;\r\n            bindingContext.tempRef = data.tempRef;\r\n            bindingContext.selection = data.selection;\r\n            bindingContext.selected = isSelected;\r\n            bindingContext.row = currentRow;\r\n        });\r\n    }\r\n    rebindAllRows(event) {\r\n        let rowCache = event.detail.rowCache;\r\n        let downScroll = event.detail.downScroll;\r\n        for (let i = 0; i < rowCache.length; i++) {\r\n            this.controller.getElement(rowCache[i].row, downScroll, (data) => {\r\n                let bindingContext = rowCache[i].bindingContext;\r\n                if (data.rowRef) {\r\n                    if (data.rowRef.__group) {\r\n                        rowCache[i].isGroup = true;\r\n                    }\r\n                    else {\r\n                        rowCache[i].isGroup = false;\r\n                    }\r\n                }\r\n                let isSelected = data.selection.isSelected(rowCache[i].row);\r\n                if (isSelected) {\r\n                    if (!rowCache[i].selected) {\r\n                        rowCache[i].selected = true;\r\n                        rowCache[i].left.classList.add('avg-selected-row');\r\n                        rowCache[i].main.classList.add('avg-selected-row');\r\n                        rowCache[i].right.classList.add('avg-selected-row');\r\n                    }\r\n                }\r\n                else {\r\n                    if (rowCache[i].selected) {\r\n                        rowCache[i].selected = false;\r\n                        rowCache[i].left.classList.remove('avg-selected-row');\r\n                        rowCache[i].main.classList.remove('avg-selected-row');\r\n                        rowCache[i].right.classList.remove('avg-selected-row');\r\n                    }\r\n                }\r\n                if (data.rowRef === undefined || data.rowRef === null) {\r\n                    rowCache[i].left.style.display = 'none';\r\n                    rowCache[i].main.style.display = 'none';\r\n                    rowCache[i].right.style.display = 'none';\r\n                    rowCache[i].group.style.display = 'none';\r\n                }\r\n                else {\r\n                    rowCache[i].left.style.display = 'block';\r\n                    rowCache[i].main.style.display = 'block';\r\n                    rowCache[i].right.style.display = 'block';\r\n                    rowCache[i].group.style.display = 'block';\r\n                }\r\n                bindingContext.rowRef = data.rowRef;\r\n                bindingContext.tempRef = data.tempRef;\r\n                bindingContext.selection = data.selection;\r\n                bindingContext.selected = isSelected;\r\n                bindingContext.row = rowCache[i].row;\r\n            });\r\n        }\r\n    }\r\n}\r\nexports.RowDataBinder = RowDataBinder;\r\n//# sourceMappingURL=rowDataBinder.js.map",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860157,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
