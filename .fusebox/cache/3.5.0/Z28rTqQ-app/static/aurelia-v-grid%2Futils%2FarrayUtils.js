module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst arrayFilter_1 = require(\"./arrayFilter\");\r\nconst arraySort_1 = require(\"./arraySort\");\r\nconst arrayGrouping_1 = require(\"./arrayGrouping\");\r\nclass ArrayUtils {\r\n    constructor() {\r\n        this.arrayFilter = new arrayFilter_1.ArrayFilter();\r\n        this.arraySort = new arraySort_1.ArraySort();\r\n        this.arrayGrouping = new arrayGrouping_1.ArrayGrouping();\r\n    }\r\n    orderBy(collection, attribute, addToCurrentSort) {\r\n        const groupingFields = this.getGrouping().map((data) => data.field);\r\n        const grouping = this.getGrouping();\r\n        let result = {\r\n            fixed: null,\r\n            full: null\r\n        };\r\n        if (groupingFields.length > 0) {\r\n            const lastSort = this.getOrderBy();\r\n            this.resetSort();\r\n            let exist = false;\r\n            const newSort = [];\r\n            let count = 0;\r\n            lastSort.forEach((sort) => {\r\n                count++;\r\n                if (groupingFields.indexOf(sort.attribute) !== -1 || addToCurrentSort) {\r\n                    newSort.push(sort);\r\n                    if (sort.attribute === attribute) {\r\n                        sort.asc = sort.asc === true ? false : true;\r\n                        sort.no = count;\r\n                        exist = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (sort.attribute === attribute) {\r\n                        sort.asc = sort.asc === true ? false : true;\r\n                        sort.no = count;\r\n                        exist = true;\r\n                        newSort.push(sort);\r\n                    }\r\n                }\r\n            });\r\n            this.setLastSort(newSort);\r\n            if (!exist && attribute) {\r\n                this.setOrderBy(attribute, true);\r\n            }\r\n            this.runOrderbyOn(collection);\r\n            const groupedArray = this.group(collection, grouping, true);\r\n            result = {\r\n                fixed: groupedArray,\r\n                full: collection\r\n            };\r\n        }\r\n        else {\r\n            if (!attribute) {\r\n                const lastSort = this.getOrderBy();\r\n                this.resetSort();\r\n                this.setLastSort(lastSort);\r\n                this.runOrderbyOn(collection);\r\n                result = {\r\n                    fixed: collection,\r\n                    full: collection\r\n                };\r\n            }\r\n            else {\r\n                this.setOrderBy(attribute, addToCurrentSort);\r\n                this.runOrderbyOn(collection);\r\n                result = {\r\n                    fixed: collection,\r\n                    full: collection\r\n                };\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    group(array, grouping, keepExpanded) {\r\n        return this.arrayGrouping.group(array, grouping, keepExpanded);\r\n    }\r\n    getGrouping() {\r\n        return this.arrayGrouping.getGrouping();\r\n    }\r\n    groupCollapse(id) {\r\n        return this.arrayGrouping.collapse(id);\r\n    }\r\n    groupExpand(id) {\r\n        return this.arrayGrouping.expand(id);\r\n    }\r\n    getOrderBy() {\r\n        return this.arraySort.getOrderBy();\r\n    }\r\n    setLastSort(array) {\r\n        this.arraySort.setLastSort(array);\r\n    }\r\n    setOrderBy(attribute, addToCurrentSort) {\r\n        this.arraySort.setOrderBy(attribute, addToCurrentSort);\r\n    }\r\n    runOrderbyOn(array) {\r\n        this.arraySort.runOrderbyOn(array);\r\n    }\r\n    resetSort(defaultSortAttribute) {\r\n        this.arraySort.reset(defaultSortAttribute);\r\n    }\r\n    resetGrouping() {\r\n        this.arrayGrouping.reset();\r\n    }\r\n    getCurrentFilter() {\r\n        return this.arrayFilter.getLastFilter();\r\n    }\r\n    query(array, params) {\r\n        return this.arrayFilter.runQueryOn(array, params);\r\n    }\r\n    setLocaleCompare(code, options) {\r\n        this.arraySort.setLocaleCompare(code, options);\r\n    }\r\n}\r\nexports.ArrayUtils = ArrayUtils;\r\n//# sourceMappingURL=arrayUtils.js.map",
dependencies: ["./arrayFilter","./arraySort","./arrayGrouping"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860169,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
