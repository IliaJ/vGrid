module.exports = { contents: "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst selection_1 = require(\"./selection\");\r\nconst collection_1 = require(\"./collection\");\r\nconst arrayUtils_1 = require(\"./utils/arrayUtils\");\r\nclass DataSource {\r\n    constructor(selection, config) {\r\n        this.selection = selection || new selection_1.Selection('single');\r\n        this.selectionEventID = this.selection.addEventListener(this.selectionEventCallback.bind(this));\r\n        this.selection.overrideGetRowKey(this.getRowKey.bind(this));\r\n        this.selection.overrideGetRowKeys(this.getRowKeys.bind(this));\r\n        this.arrayUtils = new arrayUtils_1.ArrayUtils();\r\n        this.key = null;\r\n        this.mainArray = null;\r\n        this.config = config;\r\n        if (this.config) {\r\n            this.key = config.key || '__avgKey';\r\n            this.rowHeight = config.rowHeight || 25;\r\n            this.groupHeight = config.groupHeight || 25;\r\n            this.rowHeightCallback = config.rowHeightCallback || function () { return null; };\r\n        }\r\n        else {\r\n            this.key = '__avgKey';\r\n            this.rowHeight = 25;\r\n            this.groupHeight = 25;\r\n            this.rowHeightCallback = function () { return null; };\r\n        }\r\n        this.eventIdCount = -1;\r\n        this.eventCallBacks = [];\r\n        this.entity = null;\r\n        this.collection = new collection_1.Collection(this);\r\n    }\r\n    getSelection() {\r\n        return this.selection;\r\n    }\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n    length() {\r\n        return this.collection.length;\r\n    }\r\n    triggerEvent(event) {\r\n        this.eventCallBacks.forEach((FN, i) => {\r\n            if (FN !== null) {\r\n                const alive = FN(event);\r\n                if (!alive) {\r\n                    this.eventCallBacks[i] = null;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    addEventListener(callback) {\r\n        this.eventIdCount++;\r\n        this.eventCallBacks.push(callback);\r\n        return this.eventIdCount;\r\n    }\r\n    removeEventListener(id) {\r\n        this.eventCallBacks.splice(id, 1);\r\n    }\r\n    setArray(array) {\r\n        this.collection = new collection_1.Collection(this);\r\n        this.selection.reset();\r\n        this.arrayUtils.resetGrouping();\r\n        this.arrayUtils.resetSort(this.key);\r\n        this.entity = null;\r\n        this.collection.setData(array);\r\n        this.mainArray = this.collection.getEntities();\r\n        this.triggerEvent('collection_changed');\r\n    }\r\n    push(array) {\r\n        if (Array.isArray(array)) {\r\n            const grouping = this.arrayUtils.getGrouping();\r\n            let collection = this.collection.getEntities();\r\n            collection = collection.concat(array);\r\n            this.collection.setData(collection);\r\n            this.mainArray = this.collection.getEntities();\r\n            this.arrayUtils.runOrderbyOn(this.collection.getEntities());\r\n            const untouchedgrouped = this.collection.getEntities();\r\n            if (grouping.length > 0) {\r\n                const groupedArray = this.arrayUtils.group(untouchedgrouped, grouping, true);\r\n                this.collection.setData(groupedArray, untouchedgrouped);\r\n            }\r\n            this.triggerEvent('collection_updated');\r\n        }\r\n    }\r\n    refresh(data) {\r\n        if (data) {\r\n            this.collection = new collection_1.Collection(this);\r\n            this.collection.setData(data);\r\n            this.mainArray = this.collection.getEntities();\r\n            this.entity = null;\r\n        }\r\n        const grouping = this.arrayUtils.getGrouping();\r\n        this.arrayUtils.runOrderbyOn(this.collection.getEntities());\r\n        if (grouping.length > 0) {\r\n            const unGroupedArray = this.collection.getEntities();\r\n            const groupedArray = this.arrayUtils.group(unGroupedArray, grouping, true);\r\n            this.collection.setData(groupedArray, unGroupedArray);\r\n        }\r\n        this.triggerEvent('collection_updated');\r\n    }\r\n    select(row) {\r\n        this.entity = this.collection.getRow(row);\r\n    }\r\n    query(options) {\r\n        if (options) {\r\n            const newArray = this.arrayUtils.query(this.mainArray, options);\r\n            this.collection.setData(newArray);\r\n        }\r\n        else {\r\n            this.collection.setData(this.mainArray);\r\n        }\r\n        this.orderBy(null, true);\r\n        this.triggerEvent('collection_filtered');\r\n    }\r\n    orderBy(attribute, addToCurrentSort) {\r\n        const collection = this.collection.getEntities();\r\n        const result = this.arrayUtils.orderBy(collection, attribute, addToCurrentSort);\r\n        this.collection.setData(result.fixed, result.full);\r\n        this.triggerEvent('collection_sorted');\r\n    }\r\n    getCurrentOrderBy() {\r\n        return this.arrayUtils.getOrderBy();\r\n    }\r\n    getCurrentFilter() {\r\n        return this.arrayUtils.getCurrentFilter();\r\n    }\r\n    getElement(row) {\r\n        if (row === undefined || row === null) {\r\n            throw new Error('row missing');\r\n        }\r\n        else {\r\n            return this.collection.getRow(row);\r\n        }\r\n    }\r\n    updateRowData(attribute, data, rows) {\r\n        let entities = this.collection.getCurrentEntities();\r\n        rows.forEach((x) => {\r\n            entities[x][attribute] = data;\r\n        });\r\n    }\r\n    group(grouping, keepExpanded) {\r\n        this.arrayUtils.resetSort();\r\n        grouping.forEach((group) => {\r\n            this.arrayUtils.setOrderBy(group.field, true);\r\n        });\r\n        this.arrayUtils.runOrderbyOn(this.collection.getEntities());\r\n        const ungroupedArray = this.collection.getEntities();\r\n        const groupedArray = this.arrayUtils.group(ungroupedArray, grouping, keepExpanded);\r\n        this.collection.setData(groupedArray, ungroupedArray);\r\n        this.triggerEvent('collection_grouped');\r\n    }\r\n    groupCollapse(id) {\r\n        const groupedArray = this.arrayUtils.groupCollapse(id);\r\n        const ungroupedArray = this.collection.getEntities();\r\n        this.collection.setData(groupedArray, ungroupedArray);\r\n        if (id) {\r\n            this.triggerEvent('collection_collapsed');\r\n        }\r\n        else {\r\n            this.triggerEvent('collection_collapsed_all');\r\n        }\r\n    }\r\n    groupExpand(id) {\r\n        const groupedArray = this.arrayUtils.groupExpand(id);\r\n        const ungroupedArray = this.collection.getEntities();\r\n        this.collection.setData(groupedArray, ungroupedArray);\r\n        if (id) {\r\n            this.triggerEvent('collection_expanded');\r\n        }\r\n        else {\r\n            this.triggerEvent('collection_expanded_all');\r\n        }\r\n    }\r\n    getGrouping() {\r\n        return this.arrayUtils.getGrouping();\r\n    }\r\n    addBlankRow() {\r\n        const newElement = {};\r\n        this.mainArray.unshift(newElement);\r\n        const collectionUngrouped = this.collection.getEntities();\r\n        const displayedCollection = this.collection.getCurrentEntities();\r\n        const index = collectionUngrouped.indexOf(newElement);\r\n        if (index === -1) {\r\n            collectionUngrouped.unshift(newElement);\r\n        }\r\n        displayedCollection.unshift(newElement);\r\n        this.collection.setData(displayedCollection, collectionUngrouped);\r\n        this.entity = newElement;\r\n        this.triggerEvent('collection_filtered');\r\n    }\r\n    unshift(data) {\r\n        if (data) {\r\n            this.mainArray.unshift(data);\r\n            const displayedCollection = this.collection.getEntities();\r\n            const ungroupedCollection = this.collection.getCurrentEntities();\r\n            const index = displayedCollection.indexOf(data);\r\n            if (index === -1) {\r\n                displayedCollection.unshift(data);\r\n            }\r\n            ungroupedCollection.unshift(data);\r\n            this.collection.setData(ungroupedCollection, displayedCollection);\r\n            this.entity = data;\r\n            this.triggerEvent('collection_filtered');\r\n        }\r\n    }\r\n    remove(rows) {\r\n        const keysToDelete = new Set();\r\n        const returnArray = [];\r\n        if (Array.isArray(rows)) {\r\n            rows.forEach((row) => {\r\n                keysToDelete.add(this.getRowKey(row));\r\n            });\r\n        }\r\n        else {\r\n            if (this.entity && Number.isInteger(rows)) {\r\n                keysToDelete.add(this.getRowKey(rows));\r\n            }\r\n        }\r\n        if (keysToDelete.size > 0) {\r\n            const oldArray = this.collection.getEntities();\r\n            for (let i = 0; i < oldArray.length; i++) {\r\n                if (keysToDelete.has(oldArray[i][this.key]) === true) {\r\n                    returnArray.push(oldArray.splice(i, 1)[0]);\r\n                    i--;\r\n                }\r\n            }\r\n            this.collection.setData(oldArray);\r\n            this.refresh();\r\n        }\r\n        return returnArray;\r\n    }\r\n    getCollectionStatus() {\r\n        let status = {\r\n            collectionLength: this.mainArray ? this.mainArray.length : 0,\r\n            filteredCollectionLength: this.collection.getEntities().length,\r\n            selectionLength: this.selection.getLength()\r\n        };\r\n        return status;\r\n    }\r\n    setLocaleCompare(code, options) {\r\n        this.arrayUtils.setLocaleCompare(code, options);\r\n    }\r\n    getRowHeightState() {\r\n        return this.collection.getRowHeightState();\r\n    }\r\n    getRowKey(row) {\r\n        if (this.collection) {\r\n            return this.collection.getRowKey(row);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    getRowKeys() {\r\n        if (this.collection) {\r\n            return this.collection.getRowKeys();\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n    selectionEventCallback(e) {\r\n        this.triggerEvent(e);\r\n        return true;\r\n    }\r\n}\r\nexports.DataSource = DataSource;\r\n//# sourceMappingURL=dataSource.js.map",
dependencies: ["./selection","./collection","./utils/arrayUtils"],
sourceMap: {},
headerContent: undefined,
mtime: 1535657860148,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
